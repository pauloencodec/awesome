/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 Link√∂ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome.electrical;

public class AweElectricalAnimation extends AwePointsListAnimation {
    
    public AweElectricalMap map;
    public AweElectricalClusterInfo status;
    public AweElectricalAnimationMode currentMode;
    public str fixedMode;
    public bool singleClickInfeedToggle = false;


    public constructor(AweElectricalMap map=null, str fixedMode=null) {
        this(map, fixedMode, singleClickInfeedToggle=false);
    }

    public constructor(AweElectricalMap map=null, str fixedMode=null, bool singleClickInfeedToggle=false) {
        this.fixedMode = fixedMode;
        this.singleClickInfeedToggle = singleClickInfeedToggle;

        this(map);
    }

    public constructor(AweElectricalMap map=null) {
        super(maxInt);
        this.map = map ?? new AweElectricalMap(this.space);
        status = new AweElectricalClusterInfo(this.map);
        this.configurator = new AweElectricalAnimationModel(this);

        if (this.fixedMode) {
            this.configurator.AweElectricalAnimationModel.modeDomain = null;
        }

        launchMode();
    }   

    extend public str modeName() {
        return this.fixedMode ?? this.configurator.AweElectricalAnimationModel.mode;
    }

    public void begin() {
        super();
        if ( space ) this.setViewMode( AweElectricalViewMode() );
    }

    public void enterView(AnimationMouseInfo mi) {
        super(..);

        this.showHint();
    }

    public void configuratorChanged(str key, Object value) {
        updateSubConfigurators(rebuildProperties=!this.ignoreRebuildProperties(key));
        currentMode.configuratorChanged();
    }

    public void hoveredPointChanged(Point target) {
        currentMode.?hoveredPointChanged(target);
    }

    public point savePoint(int pointIndex, point mousePoint) {
        currentMode.?clicked(mousePoint);
        status.?updateStatus();
        this.refresh();
        return super(..);
    }

    public point{} clickablePoints() {
        return currentMode.?clickablePoints();
    }

    public Primitive3D get3D(FetchEnv3D env) {
        
        Awe3D prims();

        prims << currentMode.?get3D();
        return prims;
    }

    extend public void showHint() { 
        if (activeView as View2D) { 
            message("This animation is only supported for 3D views.");
        } else {
            str txt;
            switch (this.modeName) {
                case "Add": 
                    txt = "Click on two points, one after the other, to route power. A power line will be created from point A to point B."; 
                case "Infeed": 
                    txt = this.singleClickInfeedToggle ? "Click an infeed to toggle it on and off" : "Select an infeed to edit its properties or ctrl+click it to toggle on and off."; 
                case "Remove": 
                    txt = "Click on two points, one after the other, to remove an existing power route."; 
                case "View":
                    txt = "Use the animation properties to change mode.\n\"Infeed\" lets you select the power source. \"Add\" allows for power cable routing and \"Remove\" let you remove previously added cables."; 
                case "Debug":
                    txt = "Red lines found no suitable infeed, colorful blocks are functional clusters.";
            }
            message(txt);
        }
    }

    extend public str->AweElectricalAnimationMode modesInstances() {
        str->AweElectricalAnimationMode instances();

        instances.put("View", new AweElectricalAnimationMode(this));
        instances.put("Infeed", new AweElectricalAnimationInfeedMode(this));
        instances.put("Add", new AweElectricalAnimationAddRouteMode(this));
        instances.put("Remove", new AweElectricalAnimationDeleteRouteMode(this));
        instances.put("Debug", new AweElectricalAnimationDebugMode(this));

        return instances;
    }

    extend private void launchMode() {
        currentMode = this.modesInstances.get(this.modeName);

        currentMode.begin();

        showHint();

        updateSubConfigurators();

        this.refresh();
    }

    extend public void updateSubConfigurators(bool rebuildProperties=true) {
        //mode configurators
        this.subConfigurators = currentMode.subConfigurators();
        if (rebuildProperties) {
            this.buildProperties();
        }
    }

    extend public void updateMap() {
       this.map = new AweElectricalMap(this.space);
       status = new AweElectricalClusterInfo(this.map);
   }
}

public aweObject AweElectricalAnimationModel {
    props(
        str mode = "View"
    );
    public aweObjectDomain(
        str mode = StrSubSet(developMode ? ["View", "Infeed", "Add", "Remove", "Debug"] : ["View", "Infeed", "Add", "Remove"])
    );

    public AweElectricalAnimation animation;
    public constructor(AweElectricalAnimation animation) {
        this.animation = animation;
    }

    public void modeChanged(str newMode) {
        if (this.animation.?currentMode) this.animation.?currentMode.end();

        this.animation.?launchMode();
    }
}

{
    animate(new AweElectricalAnimation(fixedMode="Debug"));
}