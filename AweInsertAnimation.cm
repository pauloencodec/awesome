/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 Link√∂ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome;
use custom.awesome.connectors;

public class AweInsertAnimation extends InsertAnimation {
    public AweSnapper snapper;
    private str currentKey;

    public constructor(StartInsertAnimationEnv env) {
        super(env);

        this.snapper = env.selection.main.AweSnapper;

        assert(this.snapper);
    }

    public AwePreferredConnectionSelector preferredConnectionSelector(previousAnimationPreferredConnectorSelection);

    extend public AweObject getMainModel() {
        return selection.main.AweSnapper.?mainModel;
    }

    extend public void updatePrefferedConnectorList() {
        var candidates = new Connector[]();
        for(snap in this.selection.snaps) {
            if(this.getMainModel().?isPreferrableConnector(snap)) {
                candidates << snap;
            }
        }
        this.preferredConnectionSelector.updateOptions(candidates, selection.main);
    }

    public void buildProperties() {
        this.updateSelectionSnaps();

        this.destroyAnimationProperties();
        this.createAnimationProperties();
        str[] sortOrder = null;

        this.updateSnaps();
        if(this.connectionApplications and this.connectionApplications.count > 0) {
            this.animationProperties.appendSmart("connectionApplication", "Connect To", this._selectedApplication, new StrSubSet(this.connectionApplications), lockable=false);
        }

        Object[] values = preferredConnectionSelector.options.:Object[];
        bool hasPreferrableConnectors = values and values.count > 0;
        

        if(hasPreferrableConnectors) {
            this.animationProperties.appendSmart("preferredConnection", "Preferred Connection", preferredConnectionSelector.selected(), new ObjectSubSet(values), lockable=false);
        }


        if (this.snapper.activeConfigurator) {
            this.snapper.addExtraAnimationProperties(this.animationProperties);
            this.snapper.activeConfigurator.buildAnimationProperties(this.animationProperties);

            sortOrder = this.snapper.activeConfigurator.quickPropertySort();
            if ( sortOrder and sortOrder.count > 0 ) {
                for( qp in this.animationProperties.properties ) {
                    if ( sortOrder.indexOf( qp.key ) == -1 ) sortOrder << qp.key;
                }
            }
        }

        if(sortOrder and hasPreferrableConnectors) {
            sortOrder.exclude("preferredConnection");
            sortOrder.insert(0, "preferredConnection");
        }
        if(sortOrder and this.connectionApplications and this.connectionApplications.count > 0) {
            sortOrder.exclude("connectionApplication");
            sortOrder.insert(0, "connectionApplication");
        }
        this.animationProperties.finalize(showList=sortOrder);
        
        if (this.animationProperties and this.currentKey) {
            this.animationProperties.setCurrent(this.currentKey);
        }
    }

    public void propertyChange(str key, Object value) {
        super(..);

        if(key == "connectionApplication") {
            if(value as str) {
                this._selectedApplication = value;
                this.preferredConnectionSelector.selected = null;
                this.buildProperties();
            }
        }
        else if(key == "preferredConnection") {
            if(value as AwePreferredConnection) {
                this.preferredConnectionSelector.selected = value;
            }
        }
        else if (this.snapper.activeConfigurator) {
            this.snapper.activeConfigurator.animationPropertyChanged(..);
            this.snapper.extraAnimationPropertyChanged(..);
            this.snapper.refresh(true, true);
            this.currentKey = key;
        }
        this.updateSelectionSnaps();
    }

    //ghostly things
    public AweGhost activeGhost;
    extend public void updateActiveGhost(SnapInfo info) {
        AweGhost previousGhost = this.activeGhost;
        this.activeGhost = null;
        if(info as ConnectSnapInfo) {
            if(AweGhost ghost = info.snap.?getGhost()) {
                this.activeGhost = ghost;
            }
            if(AweGhost ghost = info.attach.?getGhost()) {
                this.activeGhost = ghost;
            }
        }

        var envs = aweConnectEnv(info);
        this.activeGhost.?prepare(envs.v0, envs.v1);
        
        this.space.invalidate(this);
    }

    public SnapInfo activeSnapInfo;

    //the first time snapInfoChanged hits, isUserPasteAnimating seems not be ready yet, so skipping one
    private bool firstCall = true;

    private AweTrySnapManager trySnapManager();
    extend public void snapInfoChanged(SnapInfo newInfo, AnimationMouseInfo mi) {
        if(firstCall) {
            firstCall = false;
            return;
        }

        if(newInfo as ConnectSnapInfo) {
            if(!isUserPasteAnimating) {
                if(?AweConnectLine l = newInfo.snap) {
                    l.tryResizeToFit(newInfo.attach, mi.mouseLine);
                }
            }
        }
        trySnapManager.updateConnectInfo(newInfo.ConnectSnapInfo, mi);
    }

    public void drawGraphs(LayerBuffer lb) {
        if(this.activeGhost) {
            this.activeGhost.get2D().?draw(lb);
        }

        if(activeSnapInfo as ConnectSnapInfo) {
            Line2D lineA = activeSnapInfo.attach().?snapper.?AweSnapper.?referenceLineInSpace();
            Line2D lineB = activeSnapInfo.snap().?snapper.?AweSnapper.?referenceLineInSpace();
            if(lineA and lineB) {
                AweAngleGraph angleGraph(lineA.v, lineB.v);
                angleGraph.draw(lb);
            }
        }

        this.preferredConnectionSelector.get2D().?draw(lb); 

        this.drawMergeCircles(lb);
    }

    public double mergeRadius = 5inch;

    extend public void drawMergeCircles(LayerBuffer lb) {
        var attachLine = this.activeSnapInfo.?ConnectSnapInfo.?attach.?ConnectLine;
        if(!attachLine) return;

        point{} mergeCenters();
        if(attachLine.j0) {
            mergeCenters << attachLine.spaceLine().p0;
        }
        if(attachLine.j1) {
            mergeCenters << attachLine.spaceLine().p1;
        }

        for(p in mergeCenters) {
            var g = new GCircle(circle(p.point2D, mergeRadius), lineType=new cm.draw.LineType(cm.draw.gray, cm.draw.lineStyle.dashed, width=3));
            g.draw(lb);
        }
    }

    public Primitive3D get3D(FetchEnv3D env) {
        if(this.activeGhost) {
            return this.activeGhost.get3D(env);
        }
        return null;
    }

    public Primitive3D toSpace(Primitive3D prim) {
        if(this.activeGhost and prim) {
            prim.setPosRot(this.activeGhost.ghostSnapper.pos, this.activeGhost.ghostSnapper.rot);
            prim = safeInstance3D([Primitive3D: prim]);
        }
        return prim;
    }

    public bool deny3D() {
        return false;
    }
    
    public PropObj end() {
        if(this.activeGhost) {
            var snapper = this.activeGhost.deploy();
            this.space.undoableInsert(snapper);
            modifyEnv << snapper;
            this.selection << snapper;
            this.toInsertInBsp << snapper;
            snapper.snapAllAligned();
            snapAllAligned(this.selection.main);
        }
        previousAnimationApplication = this._selectedApplication;
        previousAnimationPreferredConnectorSelection = this.preferredConnectionSelector.selected().?id;
        return super(..);
    }

    public void aborted() {
        previousAnimationApplication = null;
        previousAnimationPreferredConnectorSelection = null;
        trySnapManager.updateConnectInfo(null, this.lastMouseInfo);
    }

    // i'm not sure on this one, see 
    // https://www.configura.com/wiki/index.php/Migration_from_8.0_to_8.5
    // section on animation end snapping

    /*
        old code
        public bool snapAllAlignedAtEnd() {
            return this.activeGhost == null;
        }
     */

    // public bool snapInPutToBsp() {
    //     return this.activeGhost == null;
    // }

    public void enterView(AnimationMouseInfo mi) {
        super(..);
        this.snapper.modelChanged(new AweGroupAutomationEnterView(this.snapper));
        this.updateSelectionSnaps();

    }

     //Copied from InsertAnimation then modified. 
     public void move(AnimationMouseInfo mi) {
        static int trySkipCount;
        updateVelocity();
        bool skipSnapping = mouseVelocity > 500;
        if (mouseVelocity > 800)  trySkipCount = 100;
        
        trySkipCount = skipSnapping ? trySkipCount + 1 : 0;
        if (trySkipCount < 5) skipSnapping = false;
        if (currentSpace and currentSpace.lastSnapped) {
            skipSnapping = false;
        }
        
        point mainPos = posFromLine(mi.currentLine, preferActiveSpaceVolumes=mi.in2D);
        assert(!mainPos.x.isInfinite);
    
        if (currentSpace) {
            SnapperFilter filter = targetFilter();
    
            beginRedrawCurrentSpace();
            selection.main.setPos(mainPos);
            selection.main.setRot(mainOriginalTransform.rot());
    
            if (!denySnapping()) {
            Transform oldTranform = selection.main.toSpaceTransform();
            SnapInfo last = currentSpace ? currentSpace.lastSnapped : null;
            SnapInfo info = skipSnapping ? null : selection.trySnap(mi, modifyEnv, filter);
            
            if(this.activeSnapInfo != info) {
                this.snapInfoChanged(info, mi);
            }
            this.activeSnapInfo = info;
            this.updateActiveGhost(info);

            if (skipSnapping) modifyEnv.restore(updateBsp=true);
            
            
            if (!last or !info or !last.eq(info)) invalidate(selection.main);
            
            if (!info.possible) selection.main.setTransform(oldTranform);
    
            updateSnappers((info.ConnectSnapInfo and info.ConnectSnapInfo.snap)
                       ? info.ConnectSnapInfo.snap.snapper : null);
            
    
            if (!last or !info or !last.eq(info))
              selection.main.alignAllSnappedDuringAnimation();
            }
            
            endRedrawCurrentSpace();
        }
    }

    /**************** controlling active snaps *************** */
    public Connector[] allSnaps;

    public str[] connectionApplications();
    private str _selectedApplication = previousAnimationApplication ?? autoId;
    extend public str selectedApplication() {
        if(this._selectedApplication == autoId) return null;
        else return this._selectedApplication;
    }

    extend public void updateSnaps() {
        str{} allApplications();
        for(snap in this.allSnaps) {
            AweConnectEnv env(snap);
            allApplications <<? env.set.?application();
        }
        this.connectionApplications = allApplications.seq.sort();
        if(this.connectionApplications.count > 0) {
            this.connectionApplications.insert(0, autoId);
        }
        this.selection.snaps = this.filterSnaps(this.allSnaps);

        this.updatePrefferedConnectorList();

        //filter preferred snaps
        var preferredSnaps = new Connector[]();
        for(snap in selection.snaps) {
            if(this.preferredConnectionSelector.preferred(snap)) {
                preferredSnaps << snap;
            }
        }
        if(preferredSnaps.count > 0) {
            selection.snaps = preferredSnaps;
        }
    }

    public void updateSelectionSnaps() {
        super();
        this.allSnaps = selection.snaps;
        this.updateSnaps();
    }

    extend public Connector[] filterSnaps(Connector[] snaps) {
        Connector[] newList();
        for (snap in snaps) {
            if (this.includeSnap(snap)) newList << snap;
        }
        return newList;
    }

    extend public bool includeSnap(Connector snap) {
        if(str application = this.selectedApplication()) {
            AweConnectEnv env(snap);
            return env.set.?application() == application;
        }
        return true;
    }


    /******* immediate animation ***** */
    public Animation immediateAnimation(angle a, bool allowRotate) {
        this.immediateSnap = this.getImmediateSnap(a, allowRotate);
        return super(..);
    }

    extend public Connector lastSnapped() {
        if(currentSpace) {
            if(?ConnectSnapInfo info = currentSpace.lastSnapped) {
                return info.snap;
            }
        }
        return null;
    }

    extend public Connector getImmediateSnap(angle a, bool allowRotate) {
        Connector[] potentialStretchers();
        if(?AweSnapper snapper = selection.main) {
            var stretchers = snapper.mainModel.getStretchers();
            //opportunity to make this overridable some day
            str immediateStretchProp = "width";
            for(stretcher in stretchers) {
                if(stretcher.propKey == immediateStretchProp) {
                    potentialStretchers << stretcher.stretcherB << stretcher.stretcherA;
                }
            }
        }

        potentialStretchers.sort(function sortByDistanceToLine, lastMouseInfo.mouseLine);
        for(AweStretcherConnector c in potentialStretchers) {
            if(c.isFree()) {
                return c;
            }
        }
        if(!potentialStretchers.empty) return potentialStretchers.first();
        return null;
    }

}

public int sortByPriorityDesc(Connector a, Connector b, Object env) {
    return compare(b.attachPriority(), a.attachPriority());
}

public int sortByDistanceToLine(Connector a, Connector b, Object env) {
    if(?Line l = env.line) {
        return compare(
            l.v.distance(a.spacePos()), 
            l.v.distance(b.spacePos())
        );
    }
    return 0;
}

public class AweTrySnapManager {
    public AweConnectEnv previousAttach;
    public AweConnectEnv previousSnap;

    public constructor() {}

    extend public void updateConnectInfo(ConnectSnapInfo newInfo, AnimationMouseInfo mi) {
        var snapEnv = new AweConnectEnv(newInfo.snap);
        var attachEnv = new AweConnectEnv(newInfo.attach);

        if(newInfo.attach != previousAttach.?connector or newInfo.snap != previousSnap.?connector) {
            snapEnv.model.?trySnapEnv = null;
            snapEnv.model.?tryAttachEnv = null;
            attachEnv.model.?trySnapEnv = null;
            attachEnv.model.?tryAttachEnv = null;

            previousAttach.?set.?tryAttachAborted(previousAttach, previousSnap, mi);
            attachEnv.model.?trySnapEnv = snapEnv;
            attachEnv.set.?tryAttach(attachEnv, snapEnv, mi);
            attachEnv.model.?tryAttach(attachEnv, snapEnv, mi);

            previousSnap.?set.?trySnapAborted(previousSnap, previousAttach, mi);
            snapEnv.model.?tryAttachEnv = attachEnv;
            snapEnv.set.?trySnap(snapEnv, attachEnv, mi);
            snapEnv.model.?trySnap(snapEnv, attachEnv, mi);
        }

        previousAttach = attachEnv;
        previousSnap = snapEnv;
    }
}

private str previousAnimationApplication;
private str previousAnimationPreferredConnectorSelection;