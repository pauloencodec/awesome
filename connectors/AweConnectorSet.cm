/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 Link√∂ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome.connectors;

use cm.runtime;

public class AweConnectorSet  {
    public constructor() { }

    public AweConnectorCache connectorCache : copy=null, stream=null;
    public bool selected = true;

    extend public str name() {
        return null;
    }

    extend public bool optional() {
        return false;
    }

    extend public bool active() {
        return !this.optional() or this.selected;
    }

    extend public str application() {
        return null;
    }

    //bigger numbers will make this application be presented before others
    extend public double applicationBoost() {
        return 0;
    }

    //return false here for connections that don't need to actively snap to other things while being dragged. 
    //In other words, for connections that receive other objects connecting to it, such as a panel line that expects a worksurface.
    extend public bool snap() {
        return true;
    }

    extend public AweObject{} connectedModels() {
        AweObject{} result();
        
        if (!this.connectorCache) {
            return result;
        }

        for (c in this.connectorCache.buffer) {
            for (AweSnapper s in c.connectedSnappers()) {
                result <<? s.mainModel;                
            }
        }

        return result;
    }

    extend public AweObject getConnection(rest: str[] ids) {
        if (!this.connectorCache) return null;

        for (id in ids) {
            var connector = this.connectorCache.get(id);
            var connections = connector.?connectedSnappers();

            if (connections.any()) {
                return connections.get().getModel();
            }
        }

        return null;
    }

    extend public AweObject{} getConnections(rest: str[] ids) {
        if (!this.connectorCache) return null;

        AweObject{} result();

        for (id in ids) {
            var connector = this.connectorCache.get(id);
            var connections = connector.?connectedSnappers();

            if (connections.any()) {
                for (c in connections) {
                    result << c.getModel();
                }
            }
        }

        return result;
    }

    extend public bool isConnected(rest: str[] ids) {
        if (!this.connectorCache) return false;

        for (id in ids) {
            var connector = this.connectorCache.get(id);

            if (connector.isConnected()) {
                return true;
            }
        }
        
        return false;
    }

    extend public void connectors(AweConnectorCache cc, bool ghostMode) {
        this.connectors(cc);
    }

    extend public void connectors(AweConnectorCache cc) {
    }

    extend public bool connect(AweConnectEnv me, AweConnectEnv other) {
        if(!magnetSetsAttract(me.connector.getMagnets(), other.connector.getMagnets())) return false;
        return true;
    }

    extend public void validate(AweValidationIssues issues) {
        for(validator in this.getValidators()) if(validator.active) {
            validator.validate(issues);
        }
    }

    extend public AweValidator[] getValidators() {
        AweValidator[] validators();
        return validators;
    }

    extend public void connected(AweConnectEnv me, AweConnectEnv other) {
    }

    extend public void disconnected(AweConnectEnv me, AweConnectEnv other) {

    }

    //this is trying to connect to something
    extend public void trySnap(AweConnectEnv me, AweConnectEnv other, AnimationMouseInfo mi) {
    }

    extend public void trySnapAborted(AweConnectEnv me, AweConnectEnv other, AnimationMouseInfo mi) {
    }

    //somethign is trying to connect to this
    extend public void tryAttach(AweConnectEnv me, AweConnectEnv other, AnimationMouseInfo mi) {
    }

    extend public void tryAttachAborted(AweConnectEnv me, AweConnectEnv other, AnimationMouseInfo mi) {
    }

    extend public Point visiblePosition(Connector c, point p) {
        return null;
    }

    extend public vector getDisplacementIfConnected(AweConnectEnv me, AweConnectEnv other) {
        point oldPosition = me.snapper.pos();
        point newPosition = me.snapper.positionIfConnected(me.connector, other.connector);

        return newPosition - oldPosition;
    }

    extend public bool debug() {
        return false;
    }

    extend public bool isAnyConnected(){
        if (connectorCache != null) for (c in connectorCache.buffer) if (c.isConnected)
            return true;

        return false;
    }

    extend public int connectedCount() {
        int count = 0;

        if (connectorCache != null) for (c in connectorCache.buffer) if (c.isConnected)
            count++;

        return count;
    }

    /**
     * Return the distance from a connection to the mouse line 'l' (space-coordinates).
     */
     extend public double distance(Connector c, line l) {
         if(c as ConnectLine) {
             return l.distance(c.spaceLine());
         }
        return l.distance(c.spacePos());
    }

    extend public Double connectLineAlignConnector(ConnectLine s, Connector c, double t) {
        return null;
    }
}