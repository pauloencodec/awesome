/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 LinkÃ¶ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome.connectors;

use custom.awesome.product;

public class AweConnectorCache {
    private str->Connector _cache();
    private Connector[] _buffer();
    private Snapper snapper : public readable;

    public AweProduct currentProduct;
    
    public constructor(Snapper snapper) {
        this.snapper = snapper;
    }   

    extend public Connector get(str key, point position, orientation direction, ConnectRule rule=magneticRule, bool realign=false, bool hiddenOnDC=true, bool mandatory=false, AweMagnet magnet=null, AweMagnet{} magnets=null) {
        if(magnet and !magnets) {
            magnets = {magnet};
        }
        Connector c = this.get(key);

        if (!c) {
            c = new AweConnectPoint(this.snapper);
            
            this._cache.put(this.getCacheKey(key), c);
        }

        if (c as AweConnectPoint) {
            c.realign = realign;
            c.hiddenWhenDisconnected = hiddenOnDC;
            c.mandatory = mandatory;
        }

        return this.setupConnector(c, position, direction, key, rule, magnets);
    }

    extend public Connector makePoint(str key, point position, orientation direction, ConnectRule rule=magneticRule, bool realign=false, bool hiddenOnDC=true, bool mandatory=false, AweMagnet magnet=null, AweMagnet{} magnets=null) {
        return this.get(..);
    }

    extend public Connector makeLine(str key, line l, angle roll=0deg, ConnectRule rule= magneticRule, bool realign=false, bool hiddenOnDC=true, bool mandatory=false, AweMagnet magnet=null, AweMagnet{} magnets=null) {
        return this.makeLine(key, l.p0, l.p1, roll, rule, realign, hiddenOnDC, mandatory, magnet, magnets);
    }

    extend public Connector makeLine(str key, point p0, point p1, angle roll=0deg, ConnectRule rule= magneticRule, bool realign=false, bool hiddenOnDC=true, bool mandatory=false, AweMagnet magnet=null, AweMagnet{} magnets=null) {
        Connector c = this.get(key);

        if (!c) {
            c = new AweConnectLine(this.snapper, p0, p1, roll, rule);

            this._cache.put(this.getCacheKey(key), c);
        } 
        if(magnet and !magnets) {
            magnets = {magnet};
        }
        if (c as AweConnectLine) {
            c.setRule(rule);
            c.setPos(p0);
            c.setEndPos(p1);
            c.setRoll(p0, p1, roll);
            c.setId(key);
            c.setMagnets(magnets);
            c.realign = realign;
            c.hiddenWhenDisconnected = hiddenOnDC;
            c.mandatory = mandatory;
        }
        
        this.addToBuffer(c);
        
        return c;
    }

    extend public Connector makeFace(str key, double w, double d, double z, ConnectRule rule=magneticRule, bool realign=false, bool mandatory=false) {
        Connector c = this.get(key);

        if (!c) {
            c = new AweSupportSurface(this.snapper, w, d, z, rule);

            this._cache.put(this.getCacheKey(key), c);
        } 
        
        if (c as AweSupportSurface) {
            c.update(w, d, z);
            c.setRule(rule);
            c.setId(key);
            c.realign = realign;
            c.mandatory = mandatory;
        }
        
        this.addToBuffer(c);
        
        return c;
    }

    extend public Connector makeFace(str key, point pos, Graph g, ConnectRule rule=magneticRule, bool realign=false, bool mandatory=false, orientation rot = (0deg, 0deg, 0deg), AweMagnet magnet=null, AweMagnet{} magnets=null) {
        Connector c = this.get(key);

        if (!c) {
            c = new AweSupportSurface(this.snapper, pos, g, rule, rot);
            this._cache.put(this.getCacheKey(key), c);
        }

        if(magnet and !magnets) {
            magnets = {magnet};
        }
        
        if (c as AweSupportSurface) {
            c.update(pos, g);
            c.setRule(rule);
            c.setId(key);
            c.setRot(rot);
            c.realign = realign;
            c.mandatory = mandatory;
            c.setMagnets(magnets);
        }
        
        this.addToBuffer(c);
        
        return c;
    }

    extend public Connector makeStandOn(str key, point pos, ConnectRule rule=magneticRule, bool realign=false, bool mandatory=false, orientation rot = (0deg, 90deg, 0deg), AweMagnet magnet=null, AweMagnet{} magnets=null) {
        Connector c = this.get(key);

        if (!c) {
            c = new AweStandOnPoint(this.snapper, pos, rot);

            this._cache.put(this.getCacheKey(key), c);
        }

        if(magnet and !magnets) {
            magnets = {magnet};
        }
        
        if (c as AweStandOnPoint) {
            c.setPos(pos);
            c.setRule(rule);
            c.setRot(rot);
            c.setId(key);
            c.realign = realign;
            c.mandatory = mandatory;
            c.setMagnets(magnets);
        }
        
        this.addToBuffer(c);
        
        return c;
    }

    extend public Connector add(str key, Connector connector) {
        Connector c = this.get(key);

        if (!c) {
            c = connector;

            this._cache.put(this.getCacheKey(key), c);
        }

        this.setupConnector(connector, connector.pos, connector.rot, connector.getId(), connector.rule);

        return c;
    }

    extend private Connector setupConnector(Connector c, point position, orientation direction, str id, ConnectRule rule=magneticRule, AweMagnet{} magnets=null) {
        c.setPos(position);
        c.setRot(direction);
        c.setRule(rule);
        c.setId(id);
        c.setMagnets(magnets);
        
        this.addToBuffer(c);
        
        return c;
    }

    extend private str getCacheKey(str key) {
        if (this.currentProduct) {
            return key # "_" # this.currentProduct.class.toS();
        }

        return key;
    }

    extend public Connector[] buffer() {
        return this._buffer;
    }

    extend public Connector get(str key) {
        return this._cache.get(this.getCacheKey(key));
    }

    extend public void clearBuffer() {
        this._buffer.clear();
    }

    extend public void addToBuffer(Connector connector) {
        if (connector !in this._buffer) {
            if(currentProduct)
                connector.setModel(currentProduct._model);
            this._buffer << connector;
        }
    }

    extend public void addToBuffer(str key) {
        this.addToBuffer(this.get(key));
    }

    extend public void addToBuffer(rest: str[] keys) {
        for (key in keys) {
            this.addToBuffer(key);
        }
    }

    extend public void addToBuffer(str[] keys) {
        for (key in keys) {
            this.addToBuffer(key);
        }
    }

    extend public void removeFromBuffer(str key) {
        var c = this.get(key);

        if (c in this._buffer) {
            this._buffer.exclude(c);
        }
    }

    extend public void removeFromBuffer(rest: str[] keys) {
        for (key in keys) {
            this.removeFromBuffer(key);
        }
    }

    extend public void removeFromBuffer(str[] keys) {
        for (key in keys) {
            this.removeFromBuffer(key);
        } 
    }

    extend public void addToConnectors(ConnectorCollection coll) {
        for (c in this._buffer) {
            coll << c;
        }
    }

}