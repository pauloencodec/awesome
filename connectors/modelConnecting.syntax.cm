/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 Link√∂ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome.connectors;
use cm.syntax;

public member @visibility modelConnecting ';' {
    return member {
        
        @visibility Object bag: copy=null, stream=null;

        @visibility AweObject model: copy=null, stream=null;

        @visibility AweGhost ghost: copy=null, stream=null;

        @visibility AweMagnet{} magnets;

        @visibility bool passive;

        public bool connect(Connector c, bool oneway=false) {
            this.passive = oneway;
            
            var success = super(..);
            
            if(success) {
                AweObject thisModel = this.getModel();
                AweObject otherModel = c.getModel();
                if(thisModel) {
                    thisModel.connected(otherModel);
                    thisModel.connected(this, c, otherModel);
                }

                AweConnectEnv me(this);
                AweConnectEnv other(c);
                if(me.set) {
                    me.set.connected(me, other);
                }

                if (this.snapper in AweSnapper) {
                    this.snapper.AweSnapper.refresh(true);
                } 
            }
            return success;
        }

        public bool disconnect(Connector c, bool oneway=false) {
            var success = super(..);
            if(success) {
                AweObject thisModel = this.getModel();
                AweObject otherModel = c.getModel();
                if(thisModel) {
                    thisModel.disconnected(otherModel);
                    thisModel.disconnected(this, c, otherModel);
                }

                AweConnectEnv me(this);
                AweConnectEnv other(c);
                if(me.set) {
                    me.set.disconnected(me, other);
                }

                if (this.snapper in AweSnapper) {
                    this.snapper.AweSnapper.refresh(true);
                }
            }
            return success;
        }

        /*********** awe connector set ****************/
        public AweConnectorSet connectorSet: copy=null, stream=null;

        public bool connectableTo(Connector connector, bool oneway=false, bool aligned=false) {
            AweConnectEnv me(this);
            AweConnectEnv other(connector);

            if (this.isConnectable(me, other, connector)) {
                Connector self = this;

                if (self as ConnectLine) {
                    //maxDouble means it doesn't fit. sometimes I get ~0 too, meaning the same thing
                    //ask one
                    if (self.freeSnapPosition(connector, self.length / 2) == maxDouble or self.freeSnapPosition(connector, self.length / 2) == 0) {
                        return false;
                    }
                    if (connector as ConnectLine) {
                        //ask the other
                        if (connector.freeSnapPosition(self, connector.length / 2) == maxDouble or connector.freeSnapPosition(self, connector.length / 2) == 0) {
                            return false;
                        }
                    }
                }

                return true;
            }

            return me.set or (this.rule == magneticRule) ? false : super(..);
        }

        extend private bool isConnectable(AweConnectEnv me, AweConnectEnv other, Connector connector) {
            if (me.set) return me.set.connect(me, other);

            return magnetSetsAttract(this.magnets, connector.getMagnets());
        }

        /**
        * Return the distance from this connection to the mouse line 'l' (space-coordinetes).
        */
        public double distance(line l) {
            AweConnectEnv me(this);
            if(me.set) {
                //delegate to set
                return me.set.distance(this, l);
            } else {
                return super(..);
            }
        }

        public double priority = 0;
        public double attachPriority() { 
            return this.priority;
        }
    };
}