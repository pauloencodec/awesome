/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 Link√∂ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome;

use cm.abstract.picklist;
use cm.abstract.tools.queryDialog;
use custom.awesome.ui;
use custom.awesome.picklist;
use cm.core.calc;

private const str queryDialogKey = "awe-query-dialog";

package AweQueryDialog queryDialog = null : keep;

private bool _multiMode = false;

private sizeI _dialogSize(320, 200);
private sizeI _gridSize(680, 540);

public class AweQueryDialog extends AbstractQueryDialog {

    /* pulled in from GoQueryDialog 8.0: */

        public bool multiMode() { return _multiMode; }

        public sizeI dialogSize() { return _dialogSize; }

        public sizeI gridSize() { return _gridSize; }

        public void closeQueryDialog() {
	        if (queryDialog) queryDialog.close();
        }

        public void setLocalQueryDialog() {
            queryDialog = this;
        }

        public void addMenu() {
            MenuBar menu(this);
            SubMenuInfo settingsInfo(TreeViewItem("settings", "Settings"),
                        downCB=null);
            menu.appendSubMenu(settingsInfo);
            menu.appendItem("settings", TreeViewItem("single", "SingleMode",
                                color()),
                    callback=function multiMenuCB);
            menu.appendItem("settings", TreeViewItem("multi", "MultiMode",  color()),
                    callback=function multiMenuCB);
        }

    /* End pulled in from GoQueryDialog */

    public str dialogCaption() {
        return this.mainSnapper.?specialParts ? "Query - This product is a special" : "Query";
    }

    public bool useSpecialButtons() {
        return this.mainSnapper.picklistProxy != null;
    }

    extend public AweSnapper mainSnapper() {
        if (!this.owners or this.owners.empty()) {
            return null;
        }

        return this.owners.first().AweSnapper;
    }

    public void makeSpecial() {
        if (this.multiMode or !this.useSpecialButtons()) {
            return;
        }

        var proxy = this.mainSnapper.picklistProxy;
        var dialog = new AwePicklistDialog(anyFrameWindow(), proxy);

        proxy.queryDialog = this;

        if (!this.mainSnapper.specialParts) {
            this.mainSnapper.removeAllTags();

            var index = 0;

            AwePart[] parts();

            for (rowIndex in 0..(this.igrid.rowCount - 1)) {
                var row = this.igrid.row(rowIndex);

                for (EditGridCell cell in row) {
                    if (?AwePart part = cell.refPart) {
                        parts << part;
                    }
                }
            }

            this.mainSnapper.specialParts = true;

            for (part in parts) {
                var item = new AwePicklistItem(part.catalog, part.sku, part.description, part.listPrice, part.quantity);

                if (part.tag) {
                    item.setTag(this.mainSnapper, part.tag.copy(), index);
                    
                    index++;
                    
                    if (!proxy.tag and item.tag.isVisible()) {
                        proxy.tag = item.tag.copy();
                    }
                }

                dialog.itemManager.addItem(proxy, proxy.picklistKey, item);
            }
            
            this.refreshContent();
            this.mainSnapper.invalidate();
        }
    }

    public void removeSpecials() {
        if (!this.mainSnapper.specialParts) return;

        int sure = makeYesNoDialog(this, "Are you sure?", "Are you sure you want to remove all specials?");
	    
        if (sure == 1) {
            this.mainSnapper.specialParts = false;

            var proxy = this.mainSnapper.picklistProxy;

            proxy.replaceItems(proxy.picklistKey, null);
            
            this.mainSnapper.removeAllTags();

            session.mainWorld.invalidateWorldPrice();
            
            this.refreshContent();

            if (PicklistDialog dialog = getPicklistDialog()) {
                dialog.close();
            }
	    }
    }

    public void layoutQueryDialog(bool first=true) {
        super(..);

        // copied in from goQueryDialog
        if (menuBar) {
            menuBar.enable("settings", "single", multiMode);
            menuBar.enable("settings", "multi", !multiMode);
	    }

        if (this.useSpecialButtons()) {
            this.makeSpecialBtn.enable(!this.multiMode);
            this.toggleRemoveSpecialsButton();

            this.changeSpecialBtn.setVisible(false);
        }
    }

    public void refreshContent() {
        this.toggleRemoveSpecialsButton();

        Snapper owner;
	
        if (this.owners and this.owners.any()) {
            owner = this.owners.first();
        }
        
        if (owner) {
            SpaceSelection to = owner.space ? owner.space.selection : null;
            Snapper[] ss();
            
            if (to) {
                if (this.multiMode and to.snappers) {
                    for (s in to.snappers) {
                        ss << s;
                    }
                }
                else if (to.main) {
                    ss << to.main;
                }
            }
            
            if (ss.count() > 0) {
                owners = ss;
                this.parts = null;
                
                this.rebuildSubs();
            }
            
            if (!parts or parts.empty) {
                if (to and to.main) {
                    to.main.popupMenuItemClicked(null,
                        new MenuCallbackEnv("query-dialog", null,
                        null, null, null));
                }
            }
        }
    }

    extend private void toggleRemoveSpecialsButton() {
        this.makeSpecialBtn.setLabel(this.mainSnapper.specialParts ? "Edit Parts" : "Make Special");

        this.setLabel(this.dialogCaption());

        this.removeSpecialsBtn.alignRight();
        this.removeSpecialsBtn.enable(!this.multiMode and this.mainSnapper.specialParts);
    }

    public Part[] getRawParts() {
        var parts = super();

	    if (World w = session.mainWorld()) {
            parts = parts.finalize(w.mainSpace);
            parts = parts.merge(env=NativeFetchEnv(getPartTagCategories(w.mainSpace)));
            parts = parts.finalizeAfterMerge();
	    }

        //remove global parts that have no owner, to make sure we are querying only this snapper
        for (p in parts) if (!p.owner) {
            parts.exclude(p);
        }

        return parts;
    }

    public void buildOptions(Part part) {
        if (part as AwePart) {
            for (option in part.options) {
                var upcharge = option.price == 0 ? "" : calcFormatPrice(option.price);

                buildRowContents([" ", option.code, option.description, "", "",
				upcharge, "", "", "", "", "", "",
				"", "", "", ""]);
            }
        }
    }

    public void rebuildSubs() {
        if (this.owners and this.owners.any()) {
            this.sub.removeChildren();
            this.igrid.removeChildren();
            this.removeChildren();
            
            this.displays = new Display[];
            this.tdisplays = new Window[];
            
            this.addMenu();
            
            if (this.useSpecialButtons()) {
                this.buildSpecialButtons();
            }
            
            this.createGridWindow();

            this.rowc = 0;
            
            this.buildInfoWindow();
            this.layoutQueryDialog(false);
            this.autoSize();
        }
    }

    public void build() {
        if (this.owners and this.owners.any()) {
            this.addMenu();

            if (this.useSpecialButtons()) {
                this.buildSpecialButtons();
            }
            
            this.createGridWindow();
            this.buildInfoWindow();
            this.layoutQueryDialog();
        }
    }

    extend private void createGridWindow() {
        this.sub = new SubWindow(this, frameStyle=etchedFrame);
        this.igrid = new ScrollableGridWindow(this.sub, horizontalBar=true);
    }

    public double appendPartToSheet(Part part, bool child=false) {
        double totalPrice = 0;

        if (part as AwePart) {
            part.finalizeAfterMerge();
            
            totalPrice = part.listPrice;

            double totalUpcharge = part.totalUpcharge;
            double basePrice = totalPrice - totalUpcharge;            
            
            // Article Row
            this.buildRowContents([part.articleCode(), " ",  part.description(),
                    part.quantity().toS(),
                    calcFormatPrice(basePrice), (totalUpcharge > 0)
                    ? calcFormatPrice(totalUpcharge) : " ",
                    calcFormatPrice(totalPrice), " "],  
                    doPartReference=part, child=child);
            
            this.buildOptions(part);
            
            totalPrice = totalPrice * round(part.neededQuantity());
        }

        return totalPrice;
    }
}

public TreeViewItem getAweQueryDialogItem(Snapper z, View view, DropDownMenu ddm) {
    return new ImageTreeViewItem(queryDialogKey, "Query", icon("quotationList"));
}

public bool aweQueryDialogItemClicked(Snapper z, View view, MenuCallbackEnv env) {
    if (env.key == queryDialogKey) {
        Window win = anyFrameWindow();
        
        var dialog = new AweQueryDialog(win, z);

        if (?AwePicklistDialog picklist = getPicklistDialog()) {
            if (picklist.owner.snapper == z) {
                picklist.owner.queryDialog = dialog;
            }
        }
        
        return true;
    }

    return false;
}

/**
 * Multi CB
 */
private void multiMenuCB(MenuCallbackEnv env) {
    _multiMode = (env.key == "multi");
    if (queryDialog) queryDialog.refreshContent();
}