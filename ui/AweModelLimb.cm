/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 LinkÃ¶ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome.ui;

public class AweModelLimb extends SnapperLimb {
    private AweObject originalModel : public readable;
    private str limbKey;
    private str{} defaultsBlackList;

    public constructor(
        LibraryLimb parent,
        symbol pkg, 
        AweObject model,
        str key=null,
        Image image=null,
        str label=null,
        str toolTipText=null,
        str{} defaultsBlackList=null) {

        this.originalModel = model;
        this.limbKey = this.originalModel.modelHash();
        this.defaultsBlackList = defaultsBlackList;
        
        key = model.class.toS() # this.limbKey;
        pkg = model.class.pkg;
        
        super(parent, pkg, key, image=image, label="", toolTipText=toolTipText);
    }

    extend public AweObject model() {
        AweObject templateModel = getLastestLimbConfiguration(this.limbKey);
        if(!templateModel) {
            templateModel = originalModel;
        }
        this.originalModel.limbKey = this.limbKey;
        var model = templateModel.copy();
        
        for (k in this.defaultsBlackList) {
            model.set(k, this.originalModel.get(k));
        }

        return model;
    }
    
    public Window build(Window w) {
        int maxLength = 13;
        str displayLabel = this.label;

        if (displayLabel.count > maxLength) {
            displayLabel = displayLabel.truncate(maxLength) # "...";
        }

        SelectButton button = new AweModelButton(w, this,
            snapperName=key, snapperPkg=pkg,
            label=displayLabel,
            image=image, frameStyle=toolboxButtonFrameStyle);

        button.key = this.key;
        button.setToolTipText(this.toolTipText ?? this.label);

        return button;
    }

    public Snapper getSnapper() {
        var latestModel = this.model();
        var snapper = new AweModelSnapper(latestModel);
        snapper.latestLimbModel = latestModel;
        snapper.originalLimbModel = this.originalModel;
        return snapper;
    }
}

public str modelHash(AweObject model) {
    StrBuf buffer();

    model.modelHash(buffer);

    return cm.math.big.hashMd5asHex(model.toS(buffer.toS()));
}

private void modelHash(AweObject model, StrBuf buffer) {
    buffer << model.class.toS << ":";
    
    var keys = model.props.keys.seq;
    
    keys.sort();
    
    for (key in keys) {
        var value = model.props.get(key);
        var iterator = value.?class.?iterator.?instantiate();
        
        if (value and !iterator) {
            if (value as AweObject) {
                value.modelHash(buffer);
            }
            else {
                buffer << key << "={" << key << "}";
            }

            buffer << "|";
        }
    }
}

//str is the hash of the original model passed during limb construction, works like a limb key
//AweObject is the updated version of that limbs model. every time a model changes, the latest version is put here under the limb key.
//that way, this holds a copy of the last state of a snapper build by the limb.
//when the user uses the limb to place a new snapper, the limb then comes here to get the lastest and apply.
public AweObject getLastestLimbConfiguration(str limbKey) {
    return activeWorld().?getAuxillary("model-limb-defaults" # limbKey).AweObject;
}

public void setLastestLimbConfiguration(str limbKey, AweObject configuration) {
    activeWorld().?putAuxillary("model-limb-defaults" # limbKey, configuration, silent=true);
}
