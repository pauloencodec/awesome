/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 LinkÃ¶ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome.basic3D;

use cm.abstract.surface;

public class AweWorksurface {
    public APath2D profile;
    public AwePath2D outline;
    public point2D topPoint;
    public point2D bottomPoint;
    public AShape2D[] holes();
    public angle textureRotation = 0deg;
    public double height;

    private angle arcResolution = 10deg;

    public constructor(APath2D profile, AwePath2D outline, double height = 0) {
        this.profile = profile;
        this.outline = outline;
        this.height = height;
        var first = profile.startPoint;
        var last = profile.members.last.p;

        if (first.y > last.y) {
            this.topPoint = first;
            this.bottomPoint = last;
        } else {
            this.topPoint = last;
            this.bottomPoint = first;
        }
    }   

    extend public Primitive3D edge(Material3D material = randomColorLWMaterial) {
        AweExtrusion edgeEx(profile);
        Primitive3D edge = edgeEx.path(outline, extrudePathArcResolution = arcResolution);
        PlaneTextureSpace3D texSpace( (0, 0, 0), 0deg.direction(), (0, 0, 1));
        edge.setTextureSpace(texSpace);
        edge.setMaterial(material);
        edge.move((0, 0, height));
        return edge;
    }

    extend public Primitive3D makeFace(point2D p, Material3D material = randomColorLWMaterial) {
        AwePath2D copy = outline.copy;
        if (!copy.isClosed) copy.close;
        APath2D facePath = copy.reduced(p.x);

        AHollowShape2D faceShape (facePath);
        faceShape.holes = this.holes;

        PolygonMesh3D face(faceShape, 0, reversed=false, useNormals=false, doublePoints=true, doubleSided=true, arcResolution = arcResolution);

        face.move((0, 0, this.height + p.y));
        PlaneTextureSpace3D texSpace( (0, 0, 0), this.textureRotation.direction(), (0, 0, 1));
        face.setTextureSpace(texSpace);
        face.setMaterial(material);
        return face;
    }

    extend public Primitive3D makeTopFace(Material3D material = randomColorLWMaterial) {
        Awe3D prims();
        prims << makeFace(this.topPoint, material);
        for (hole in holes) {
            PolygonMesh3D holeSides (AHollowShape2D(hole), this.getThickness(), reversed=true, useNormals=false, doublePoints=true, doubleSided=true, onlySides = true);
            holeSides.move((0, 0, this.height + bottomPoint.y));
            holeSides.setMaterial(material);
            prims << holeSides;
        }

        return prims;
    }

    extend private double getThickness() {
        return topPoint.y - bottomPoint.y;
    }

    extend public Primitive3D makeBottomFace(Material3D material = randomColorLWMaterial) {
        return makeFace(this.bottomPoint, material);
    }
}


{
    AwePath2D testPath();
    testPath.up(1).right(1).down(1).close;

    AwePath2D testHole((0.5, 0.5));
    testHole.up(0.1).left(0.1).down(0.1).close;

    AwePath2D testProfile((0, 1inch));
    testProfile.down(0.5inch);
    testProfile.arcTo((5inch, -1inch), -30deg);

    AweWorksurface testEdge (testProfile, testPath, 2);
    testEdge.holes << testHole;
    test(testEdge.edge);
    test(testEdge.makeTopFace);
    test(testEdge.makeBottomFace);

}