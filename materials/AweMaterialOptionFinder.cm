/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 LinkÃ¶ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome.materials;

use custom.awesome.sif;

public class AweMaterialOptionFinder {
    private AweSifCatalogCollection catalogs;
    private AweMaterialFactory materialFactory;

    public constructor(AweSifCatalogCollection catalogs, AweMaterialFactory materialFactory) {
        if (!catalogs) {
            bug("AweSifCatalogCollection is required for AweMaterialOptionFinder");
        }

        if (!materialFactory) {
            bug("AweMaterialFactory is required for AweMaterialOptionFinder");
        }
        
        this.catalogs = catalogs;
        this.materialFactory = materialFactory;
    }

    extend public MaterialDomain get(AweObject model, str propKey, bool full) {
        var modelCopy = this.copyModel(model, propKey);

        for (basePart in this.getParts(model)) {
            var newPart = this.getMatchingPart(basePart, modelCopy);

            if (!newPart) continue;

            var baseSku = basePart.sku.explode(".");
            var newSku = newPart.sku.explode(".");

            var optionIndex = this.getMatchingOptionIndex(baseSku, newSku);

            if (optionIndex > -1) {
                var catalog = this.catalogs.get(basePart.catalog);
                var sifSku = catalog.model(basePart.articleCode);

                if (sifSku and sifSku.optionKeys) {
                    if (sifSku.optionKeys.count() > optionIndex) {
                        var materialTree = this.getMaterialTree(catalog, sifSku.optionKeys[optionIndex], full);
                        
                        return new AweMaterialDomain(materialTree, useCOM=false, this.materialFactory);
                    }
                }
            }
        }

        return null;
    }

    extend private int getMatchingOptionIndex(str[] baseSku, str[] newSku) {
        if (baseSku.count() == newSku.count()) {
            for (baseOption in baseSku, index=i) {
                var newOption = newSku[i];

                if (baseOption != newOption) {
                    return i - 1; //first value is the basemodel
                }
            }
        }

        return -1;
    }

    extend private AweMaterialTreeItem getMaterialTree(AweSifCatalog catalog, str optionKey, bool full) {
        var description = catalog.getOptionDescription(optionKey);
        
        AweMaterialTreeItem root(optionKey, description);

        if (full) {
            var options = catalog.getOptionTree(optionKey);

            for (option in options) {
                this.appendMaterialItem(root, option);
            }
        }
        else {
            this.appendMaterialItem(root, new AweSifOptionTreeItem(optionKey, description));
        }

        return root;
    }

    extend private void appendMaterialItem(AweMaterialTreeItem root, AweSifOptionTreeItem option) {
        AweMaterialTreeItem item(option.key, option.label);

        if (!root.children) {
            init root.children();
        }

        root.children << item;

        for (child in option.children) {
            this.appendMaterialItem(item, child);
        }
    }

    extend private AweObject copyModel(AweObject model, str propKey) {
        var modelCopy = model.copy();

        modelCopy.disableModelLimbDefaultsUpdating = true;

        modelCopy.set(propKey, new AweMaterialShell());

        //ensuring product for legacy models
        if (!modelCopy.getProduct()) {
            modelCopy._product = model.getProduct().copy();
            modelCopy._product.updateModel(modelCopy);
        }

        return modelCopy;
    }

    extend private AwePart[] getParts(AweObject model) {
        var product = model.getProduct();
        
        return product.?getParts();
    }

    extend private AwePart getMatchingPart(AwePart basePart, AweObject model) {
        for (part in this.getParts(model)) {
            if (basePart.articleCode == part.articleCode) {
                return part;
            }
        }

        return null;
    }
}