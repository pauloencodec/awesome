/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 LinkÃ¶ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome.storage;

public class AweStorageGrid {
    public box localBound;
    public AweStorageGridColumn[] columns();
    private str->Material3D materials();
    private Box baseBox;

    public constructor(box localBound) {
        this(localBound, null);
    }   

    public constructor(box localBound, Box baseBox) {
        this.localBound = localBound;
        this.baseBox = baseBox;
    }   

    extend public void setMaterial(str key, Material3D material) {
        materials.put(key, material);
    }

    extend public void setMaterial(Material3D material) {
        materials.put("default", material );
    }

    extend public void setMaterial(str key, Material material) {
        this.setMaterial(key, material.material3D );
    }

    extend public void setMaterial(Material material) {
        this.setMaterial(material.material3D);
    }

    extend public Material3D getMaterial(str key = "default"){
        var material = materials.get(key);
        if(material) {
            return material;
        } else {
            return randomColorLWMaterial;
        }
    }

    extend public AweStorageGrid addColumn(double width, AweStorageSeptum septum = null) {
        AweStorageGridColumn column();
        double septumThickness = 0;
        column.width = width;

        if (septum) {
            septumThickness = septum.thickness;
            column.septum = septum;
            column.width -= septumThickness/2;
        }

        if (columns.count > 0) {
            columns[columns.count-1].width -= septumThickness/2;
            columns[columns.count-1].rightPadding = septumThickness/2;
        }
        column.leftPadding = septumThickness/2;
        columns << column;
        
        return this;
    }

    extend public AweStorageGrid addPiece(AweStorageGridPiece piece, int column, double height, int columnSpan=1) {
        if(columns.count <= column) {
            bug("invalid column index");
        }
        piece.height = height;
        columns[column].addPiece(piece);

        double width = columns[column].width;

        if(columnSpan > 1) {
            for(i in 2..columnSpan) {
                if(columns.count <= column + i-1) {
                    bug("invalid column span index");
                }
                columns[column + i-1].addSpace(height);
                width += columns[column + i-1].width + columns[column + i-1].leftPadding + columns[column].rightPadding;
            }
        }
        
        piece.width = width;
        piece.depth = localBound.d;
        piece.owner = this;

        return this;
    }

    extend public AweStorageGrid addSpace(int column, double height) {
        columns[column].addSpace(height);
        return this;
    }

    extend public AweStorageGrid fillWithPieces(AweStorageGridPiece piece, int column, double height, double columnHeight, int columnSpan=1){
        int pieces = (localBound.h/height).int;
        
        for (i in 1..pieces) {
            this.addPiece(piece.copy, column, height, columnSpan);
        }
        return this;
    }

    //Evely Distributed Pieces
    // Will use local bound height.
    extend public AweStorageGrid evenlyDistPieces(AweStorageGridPiece piece, int column, int pieces, int columnSpan=1){        
        for (i in 1..pieces) {
            this.addPiece(piece.copy, column, localBound.h/pieces, columnSpan);
        }
        return this;
    }
    
    //Will use given height
    extend public AweStorageGrid evenlyDistPieces(AweStorageGridPiece piece, int column, int pieces, double height, int columnSpan=1){        
        for (i in 1..pieces) {
            this.addPiece(piece.copy, column, height/pieces, columnSpan);
        }
        return this;
    }

    extend public Awe3D get3D() {
        Awe3D prim();
        double x = 0;
        for(c in columns) {
            x += c.leftPadding;
             if (c.septum) {
                //See comments below about base - It might interfere here

                c.septum.move((-localBound.p1.x + x - c.septum.thickness/2, localBound.p0.y, localBound.p0.z));
                if(!c.septum.mainMaterial) c.septum.setMaterial(getMaterial("septum"));
                prim << c.septum;
            }
            for(p in c.pieces, index=i) {
                point origin(x,0,p.z);

                //If the storage has a base it will start adding pieces where the base ends
                //It is currently only implemented for AweStoragePlatformBase
                //I'm not sure how this would work with a septum
                if(baseBox) {
                    origin = point(origin.x, origin.y, origin.z + baseBox.v.h);
                }

                var aweBox = p.get3D();
                aweBox.move(origin + localBound.p0);
                prim << aweBox;
            }
            x += c.width + c.rightPadding;
        }
        return prim;
    }

    extend public Graph get2D() {
        Graph[] graph();
        double x = 0;
        for(c in columns) {
            x += c.leftPadding;
            for(p in c.pieces) {
                var pieceGeometry = p.get2D();
                if (pieceGeometry) {
                    point origin(x,0,p.z);
                    pieceGeometry.move(origin + localBound.p0);
                    graph << pieceGeometry;
                }
            }
            x += c.width + c.rightPadding;
        }
        return GInstance(graph);
    }
}