/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 LinkÃ¶ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome;

use cm.syntax;
use custom.awesome.connectors;

public class ToStrShell extends AweDynamicShell {
    public aweShellMethod str toStr(str extraInfo);
}

public class AweObject {
    public str->Object props() : copy=null;
    public str _galleryId;
    public str _label;
    public bool buildParentQuickProperties;

    //used to expose multiple aweObjects at once in quick properties
    public str _uniqueQuickPropertyId;

    public AweConnectEnv trySnapEnv: copy=null, stream=null;
    public AweConnectEnv tryAttachEnv: copy=null, stream=null;

    public constructor() {
        this.init();
    }

    extend public void init() { 

    }

    public str toS() {
        return this._label ? this._label : super();
    }

    //use this to turn off product (geometry, graphs, parts..)
    extend public bool disableProduct() {
        return false;
    }

    extend public bool lonelyRemove() {
        return false;
    }

    extend public bool isPreferrableConnector(Connector c) {
        if (c as AweConnectLine) {
            return !c.overrideGroupKey.emptyOrOnlyWhiteSpace() or !c.friendlyName.emptyOrOnlyWhiteSpace();
        }
        
        return false;
    }

    extend public AweModelLine[] potentialStretchLines() {
        AweModelLine[] lines();

        if(this.mainSnapper) {
            lines << new AweLocalBoundWidthModelLine(this);
            lines << new AweLocalBoundDepthModelLine(this);
        }

        for(c in this.getConnectors(this.mainSnapper)) {
            if(c as ConnectLine) {
                lines << new AweConnectionModelLine(c);
            }
        }

        return lines;
    }

    extend public void applyFrom(AweObject source, str{} ignore=null) {
    }

    extend public void applyFrom(AweObject source, str optionName) {
    }

    extend public AweEnum applyFromOptions() {
        return null;
    }

    extend public Object get(str propName) {
        return this.props.get(propName);
    }

    public bool disableModelLimbDefaultsUpdating = false;

    extend public void set(str propName, Object value) {
        Object oldValue = get(propName);

        if(oldValue.equal(value)) return;
        
        if (value as AweObject) {
            value.parent = this;
        }

        //AweMaterialShell instance must never be replaced. instead, update the contents of the shell
        if (value in AweMaterialShell and oldValue in AweMaterialShell) {
            oldValue.AweMaterialShell.setMaterial(value.AweMaterialShell.materialInstance());
        }
        else {
            this.props.put(propName, value);
            
            this.makePropModelAware(propName, value);
        }

        propChanged(propName, oldValue, value);
        
        if (this.parent) {
            this.parent.childPropChanged(this, propName, oldValue, value);
        }

        for (AweSnapper snapper in this.snappers) {
            for (model in snapper.allModels()) {
                if (model == this) {
                    snapper.onModelPropertyChanged(propName, oldValue, value);
                } 
            }
        }

        if(!disableModelLimbDefaultsUpdating)
            this.updateLimbDefaults();
    }

    extend public SubSet getDomain(str propName) {
        if (SubSet domain = this.getCustomDomain(propName)) {
            return domain;
        }
        
        return null;
    }

    extend public SubSet getCustomDomain(str propName) {
        return null;
    }

    extend public str getLabel(str propName) {
        return null;
    }

    public AweStretcher{} _stretchers : copy=null, stream=null;
    extend public AweStretcher{} getStretchers() {
        if(!this._stretchers) {
            this._stretchers = this.createStretchers();
        }
        AweStretcher{} active();
        for(s in this._stretchers) {
            if (s.model.hasDomainOptions(s.propKey)) {
                active << s;
            }
        }
        return active;
    }

    extend public void stretched(str propKey, double propValue) {
    }

    extend public void endStretch(str propKey, double propValue){
        
    }

    extend public bool hasDomainOptions(str propKey) {
        var domain = this.getDomain(propKey);
        
        return domain and domain.count > 1;
    }

    private str->str _connectLineToPropMap();
    extend public str->str connectLineToPropMap() {
        if(!this._connectLineToPropMap) init this._connectLineToPropMap();

        return this._connectLineToPropMap;
    }

    extend public AweStretcher{} createStretchers() {
        //default stretchers for everyone.
        var stretchers = {AweStretcher:
            new AweHeightStretcher(this),
            new AweElevationStretcher(this)
        };

        stretchers += this.createDomainStretchers();

        return stretchers;
    }

    extend public AweStretcher{} createDomainStretchers() {
        AweStretcher{} stretchers();
        str->DistanceEnum stretchableDomains();

        for(key, value in this.props) {
            var domain = this.getDomain(key);
            if(domain as DistanceEnum) {
                stretchableDomains.put(key, domain);
            }
        }

        for (key, domain in stretchableDomains) {
            var stretcher = this.domainStretcher(domain, key, stretchableDomains.keys());
            
            if (stretcher) {
                stretchers << stretcher;
            }
            else {
                if (key == "width") {
                    stretchers << new AweWidthStretcher(this);
                }
                else if (key == "depth") {
                    stretchers << new AweDepthStretcher(this);
                }
            }
        }

        return stretchers;
    }

    extend public AweStretcher domainStretcher(DistanceEnum domain, str propKey, str{} allStretchableDomainKeys) {
        if (!domain) return null;

        if (?AweSnapper s = this.mainSnapper()) {
            if (s.isLegacySnapper()) {
                return null;
            }
        }

        //make a copy of the model to try the different sizes
        var model = this.copy();
        model.disableModelLimbDefaultsUpdating = true;
        //use it in a snapper to get localbound, connectors and what not
        var snapper = new custom.awesome.snapper.AweModelSnapper(model);

        var lines = model.potentialStretchLines();
        if(!lines or lines.count == 0) return null;


        //get all domain sizes
        double[] values();
        for(v in domain._members) {
            values << v.double;
        }

        for(v in values) {
            model.set(propKey, v);
            // model.invalidate();
            snapper.refresh();
            for(stretchLine in lines) {
                //try each line
                if(stretchLine.localLine().length != v) {
                    //if not match, get rid of it
                    lines.exclude(stretchLine);
                }
            }
        }

        //did any survive?
        if(lines.count > 0) {

            //set connectLineToPropMap so lines can autosize on trysnap
            for(stretchLine in lines) {
                if(stretchLine as AweConnectionModelLine) {
                    this.connectLineToPropMap.put(stretchLine.id, propKey);
                }
            }

            var chosenLine = lines.first();
            chosenLine.model = this;

            //lock all other props
            var otherKeys = new str{};
            for(key in allStretchableDomainKeys) {
                if(key != propKey) {
                    otherKeys << key;
                }
            }

            return new AweModelLineStretcher(chosenLine, propKey, lockProps=otherKeys);
        }

        return null;
    }

    extend public void resetStretchers() {
        this.connectLineToPropMap.clear();
        this._stretchers = null;
    }

    extend public bool isStretchableProp(str propKey) {
        for (stretcher in this.getStretchers()) {
            if (stretcher in AweHeightStretcher or stretcher in AweElevationStretcher) {
                continue;
            }

            if (stretcher.propKey == propKey) {
                return true;
            }
        }

        return false;
    }

    /************** prop awereness ***********************/
    extend private void makePropModelAware(str propName, Object value) {
        if(value as AweModelAwareProp) {
            value.model = this;
            value.propKey = propName;
        }
    }

    extend private void updatePropAwareness() {
        for(key, value in this.props) {
            makePropModelAware(key, value);
        }
    }

    public Object copy(CopyEnv env, bool shallow=false) {
        var newCopy = super(..);

        if (newCopy as AweObject) {
            init newCopy.props();
    
            for (key, value in this.props) {
                newCopy.props.put(key, this.copyProp(env, key, value));
            }

            newCopy.updatePropAwareness();
            newCopy.materialManager().?clear();
        }

        return newCopy;
    }

    extend public Object copyProp(CopyEnv env, str key, Object value) {
        if (value as AweEnum) {
            return value;
        }

        if (value) {
            return value.copy(env);
        }

        return value;
    }

    /*************************************/

    extend public AweMaterialManager materialManager() {
        return this.mainSnapper.AweBindingSnapper.?materialManager;
    }
    
    extend public void propChanged(str propName, Object oldValue, Object newValue) {
    }        

    extend public void childPropChanged(AweObject child, str propName, Object oldValue, Object newValue) {
    }        

    extend public void buildQuickPropertiesFromSyntax(QuickProperties props) {
    }

    extend public void buildConnectorSetProperties(QuickProperties props) {
    }

    extend public void buildConnectorSetAnimationProperties(AnimationProperties props) {
        for(set in this.connectorSets) {
            if(set.optional and set.name()) {
                var setKey = "ConnectorSet_" # set.name();
                props.appendSmart(setKey, set.name(), set.selected, BoolSubSet(), lockable=false);
            }
        }
    }

    extend public bool toggleConnectorSetProperties(str key, Object value) {
        var changed = false;
        
        for(set in this.connectorSets) {
            if(set.optional and set.name()) {
                var setKey = "ConnectorSet_" # set.name();
                if(key == setKey) {
                    set.selected = value.bool;
                    changed = true;
                }
            }
        }

        return changed;
    }

    extend public bool buildQuickProperties(QuickProperties props) {
        if (this.buildParentQuickProperties) this.parent.?buildQuickProperties(props);
        
        this.buildQuickPropertiesFromSyntax(props);
        this.buildConnectorSetProperties(props);
        this.sortQuickProperties(props);
        if (this.buildParentQuickProperties) this.parent.?sortQuickProperties(props);
        
        return props and props.properties.any();
    }

    extend public void sortQuickProperties(QuickProperties props) {
        str[] sortOrder = this.quickPropertySort();
        if ( sortOrder and sortOrder.count > 0 ) {
            for( qp in props.properties ) {
                if ( sortOrder.indexOf( qp.key ) == -1 ) sortOrder << qp.key;
            }
            props.properties.sort( function aweQPSort, sortOrder );
        }
    }

    extend public bool quickPropertyChanged(QuickProperties props, str key, Object value, bool testChangeOnly) {
        if (this.buildParentQuickProperties) {
            if (this.parent.?quickPropertyChanged(..)) {
                return true;
            }
        }

        var changed = false;
        
        if(!testChangeOnly)
            changed = this.toggleConnectorSetProperties(key, value);
        
        return changed;
    }

    extend public str getQuickPropertyLabel(str key, Object value) {
        return null;
    }

    extend public str[] quickPropertySort() { return null; }

    extend public void buildAnimationPropertiesFromSyntax(AnimationProperties props) {
    }

    extend public void buildAnimationProperties(AnimationProperties props) {
        this.buildAnimationPropertiesFromSyntax(props);
        this.buildConnectorSetAnimationProperties(props);
        //There is no animationProperties.sort
    }

    extend public void animationPropertyChanged(str key, Object value) {
        this.toggleConnectorSetProperties(key, value);
    }

    public AweProduct _product : stream=null, copy=null;

    extend public AweProduct getProduct() {

        if(this.disableProduct) return null;

        if (!this._product) {
            this._product = this.createProduct();
        }

        return this._product;
    }

    extend public AweProduct createProduct() {
        return null;
    }

    extend public symbol[] getCategories() {
        return new symbol[]();
    }    

    extend public str toS(str format, rest: Object[] extraParams) {
        str->Object props();
        for(obj in extraParams, index=i) {
            props.put(i.toS, obj);
        }
        return toS(format, props);
    }

    extend public str toS(str format, str->Object extraParams=null) { 
        str->Object props = this.props.copy();
        if(extraParams) {
            for(k,v in extraParams) {
                props.put(k,v);
            }
        }

        if (!format or !props and !props.any) { return format; }

        str->str formattedData(); 
        bool capture = false;
        str token = "";
        for (s in format) { 

            if (s == '{') { 
                capture = true;
                continue;
            } 
            
            else if (s == '}') { 
                capture = false;

                Int precision;
                str extraParam;
                var originalToken = token;

                if ( extraParams and extraParams.get(token) != null ) {
                    props.set( token, this.toS( extraParams.get(token).str ));
                } 

                var toInches = false;
                if (token.indexOf(":") > -1) { 
                    var data = token.split(':');
                    token = data.v0;
                    toInches = (data.v1.toLower().indexOf("inch") > -1);
                    if (toInches) { 
                        var extraInfo = data.v1.split(':');
                        if (extraInfo.v1) { 
                            precision = extraInfo.v1.toInt;
                        }
                    } else { 
                        precision = data.v1.toInt;
                        if (!precision) { 
                            extraParam = data.v1.toS;
                        }
                    }
                }
                

                var target = props.get(token);
                if (target as Double) { 
                    formattedData.put( token, getNumberAsFormatted(target, precision, toInches=toInches ) );
                } else if (target as Distance) { 
                    formattedData.put( token, getNumberAsFormatted(target.v, precision, toInches=toInches ) );
                } else {
                    str value = ""; 
                    if (target) { 
                        var formattedValue = ToStrShell(target).toStr(extraParam);
                        if (formattedValue != null) { 
                            value = formattedValue;
                        } else { 
                            value = target.toS();
                        }
                    }
                    formattedData.put(token, value);
                }

                format = format.replaceAll("{" # originalToken # "}",  "{" # token # "}");
                token = "";
                continue;
            }

            if (capture) { 
                token #= s;
            }

        }

        for (k,v in formattedData) { 
            format = format.replaceAll("{" # k # "}", v);
        }

        return format;
    }

    extend private str getNumberAsFormatted( Double target, Int precision, bool toInches ) {
        if (target) {   
            var targetValue = target.v;
            if (toInches) {
                targetValue /= 1inch;
            }
            return (precision) ? targetValue.toS(precision.v) : targetValue.toS();
        } else { 
            return "";
        }
    }

    extend public Anonymous Anonymous() {
        return this.props;
    }

    extend public void validate(AweValidationIssues issues) {
        for(validator in this.getValidators()) if(validator.active) {
            validator.validate(issues);
        }

        for(set in connectorSets) if(set.active) {
            set.validate(issues);
        }
    }

    extend public AweValidator[] getValidators() {
        AweValidator[] validators();
        return validators;
    }

    /************** query ****************/

    extend public AweObject{} query(str query) {
        AweObjectQueryIndex index(this);
        return index.get(query);
    }

    extend public AweObject[] toAweObjectArray(Object propValue) {
        
        AweObject[] array();

        var iteratorBase = propValue.?class.?iterator.?instantiate();

        aweTryCast (iteratorBase as iterator to SeqIterator, SetIterator) {
            iterator.init(propValue);
            
            while (iterator.step()) {
                AweObject obj = iterator.get.AweObject;
                if(obj)
                    array << obj;
            }
        }
        else { 
            if (iteratorBase as MapIterator) { 
                iteratorBase.init(propValue);

                while (iteratorBase.step()) {
                    AweObject obj = iteratorBase.v.AweObject;
                    if(obj)
                        array << obj;
                } 
            }
        }

        return array.count > 0 ? array : null;
    }

    public AweObject parent: copy=reference;

    extend public AweObject{} children() {
        AweObject{} children();
        for(k,v in this.props) {
            if(v as AweObject) {
                children << v;
            } else {
                var array = this.toAweObjectArray(v);
                if(array) {
                    children += array;
                }
            }
        }
        for(c in children) {
            c.parent = this;
        }
        return children;
    }

    extend public AweObject{} descendants(AweObject{} visited = null) {
        if(!visited) {
            visited = new AweObject{}();
        }

        for(c in this.children) {
            if(c !in visited) {
                visited << c;
                visited += c.descendants(visited);
            }
        }

        return visited;
    }

    /************* snappers reference and invalidation ***********/
    public Snapper{} snappers : copy=null, stream=null;

    extend public Snapper mainSnapper() {
        return this.snappers.?get();
    }

    extend public void invalidate() {
        for(s in snappers) {
            if(s and s.isAlive) {
                if(s as AweSnapper) {
                    s.refresh(true, true);
                } else if(s) {
                    s.invalidate();
                }
            } else {
                this.snappers.remove(s);
            }
        }
    }

    extend public void appendSnapper(Snapper s) {
        if(!snappers) init snappers();
        snappers << s;
    }

    /************** connect events ************/
    extend public void connected(Connector thisConnector, Connector otherConnector, AweObject model) {

    }

    extend public void connected(AweObject model) {

    }

    extend public void disconnected(Connector thisConnector, Connector otherConnector, AweObject model) {

    }

    extend public void disconnected(AweObject model) {

    }

    //this is trying to connect to something
    extend public void trySnap(AweConnectEnv me, AweConnectEnv other, AnimationMouseInfo mi) {

    }

    extend public void trySnapAborted(AweConnectEnv me, AweConnectEnv other, AnimationMouseInfo mi) {

    }

    //somethign is trying to connect to this
    extend public void tryAttach(AweConnectEnv me, AweConnectEnv other, AnimationMouseInfo mi) {

    }

    extend public void tryAttachAborted(AweConnectEnv me, AweConnectEnv other, AnimationMouseInfo mi) {

    }

    extend public AweObject{} directlyConnectedModels(bool includeTryConnections=false) {
        AweObject{} connected();
        
        for (connector in this.getConnectors(null)) {
            for (attach in connector.connections) {
                var model = attach.getModel();
                if (model) {
                    connected << model;
                }
            }
        }

        if (includeTryConnections) {
            connected <<? this.tryAttachEnv.?model;
            connected <<? this.trySnapEnv.?model;
        }

        return connected;
    }

    extend public bool is(Type t) {
        Type thisType = this.class;
        return thisType.isAssignableTo(t);
    }

    /************** exposing connectors ***************/

    extend public Connector getConnectorById(str connectorFullId) {
        var snapper = this.mainSnapper();
        for(set in connectorSets) if(set.active()) {
            if(!set.connectorCache) {
                if(!snapper) continue;
                set.connectorCache = new AweConnectorCache(snapper);
            }
            set.connectorCache.clearBuffer();
            set.connectors(set.connectorCache, ghostMode=false);
            for(c in set.connectorCache.buffer) {
                if(connectorFullId == set.class.toS() # "." # c.getId) {
                    c.setModel(this);
                    return c;
                }
            }
        }
        return null;
    }

    extend public Connector{} getConnectors(Snapper snapper=null, bool ghostMode=false) {
        if(snapper) {
            this.appendSnapper(snapper);
        }
        Connector{} connectors();
        for(set in connectorSets) if(set.active() and this.isConnectorSetActive(set)) {
            if(!set.connectorCache) {
                if(!snapper) continue;
                set.connectorCache = new AweConnectorCache(snapper);
            }
            set.connectorCache.clearBuffer();
            set.connectors(set.connectorCache, ghostMode=ghostMode);
            for(c in set.connectorCache.buffer) {
                c.setConnectorSet(set);
                c.setModel(this);
                connectors << c;
            }
        }

        //ghosts
        var ghostConnectors = this.getGhostConnectors();
        for(c in ghostConnectors) {
            connectors << c; 
        }

        return connectors;
    }

    extend public bool isConnectorSetActive(AweConnectorSet set) {
        return true;
    }

    private Field{} _connectorSetFields : copy=null, stream=null;

    extend public AweConnectorSet{} connectorSets() {
        if(!_connectorSetFields) {
            init _connectorSetFields();
            for(field in this.class.fields) {
                Object value = this.get(field);
                if(value in AweConnectorSet) {
                    _connectorSetFields << field;
                }
            }
        }
        AweConnectorSet{} sets();
        for(field in _connectorSetFields) {
            Object value = this.get(field);
            if(value as AweConnectorSet) {
                if(value)
                    sets << value;
            }
        }
        return sets;
    }

    /************* automations ***************/
    extend public AweGroupAutomation[] getGroupAutomations() {
        return null;
    }

    extend public AweAutomation[] getAutomations() {
        return null;
    }

    /***************** schemes ******************/
    extend public bool applyScheme(AweSchemeApplier applier) {
        return false;
    }

    /**************** update settings ****************/
    //this is set by AweModelLimb if / when this model is placed by one
    public str limbKey;

    extend public void updateLimbDefaults() {
        if(this.disableModelLimbDefaultsUpdating) return;

        //limb settings
        if(this.limbKey) {
            custom.awesome.ui.modelLimbDefaults.put(this.limbKey, this.copy());
        } else if(this.parent) {
            this.parent.updateLimbDefaults();
        }
    }

    /*************** g-g-g-ghost! *****************/
    // boo
    private AweGhost{} _ghosts : copy=null, stream=null;

    extend public void appendGhosts(AweGhost{} ghosts) {

    }

    extend public AweGhost{} getGhosts() {
        if(!this._ghosts) {
            init this._ghosts();
            this.appendGhosts(this._ghosts);
        }
        return this._ghosts;
    }

    extend public Connector{} getGhostConnectors() {
        Connector{} ghostConnectors();
        for(ghost in this.getGhosts()) {
            for(c in ghost.getConnectors()) {
                c.setGhost(ghost);
                ghostConnectors << c;
            }
        }
        return ghostConnectors;
    }

    /************** reference line ************/
    //return a line here to display connection angle during try snap
    extend public Line2D referenceLine() {
        return null;
    }

    /***********************************************************************
     * Electrical
     ***********************************************************************/

    public ElectricalPosition->ElectricalModel electricalComponents();

    /*** Electrical Position Helpers ***/
    extend public ElectricalPosition findPosition( ElectricalModel model ) {
        for( k,v in electricalComponents ) {
            if ( v == model ) return k;
        }
        return null;
    }

    extend public ElectricalModel findEM( ElectricalPosition pos ) {
        return findEM( pos.position.toElectricPoint(), front=pos.front, middle=pos.middle, back=pos.back );
    }

    extend public ElectricalModel findEM( point2D loc, bool front=false, bool middle=false, bool back=false ) {
        for ( k,v in electricalComponents ) {
            if ( k.position.x == loc.x and k.position.z == loc.y
                and k.front == front and k.middle == middle and k.back == back ) return v;
        }
        return null;
    }

    extend public electricalAction allow(ElectricalModel object, ElectricalPosition pos, bool replace=false, bool toogle=false) {
        for( k,v in electricalComponents ) {
            if ( k.position == pos.position ) {                
                if ( ( k.front and pos.front ) or ( k.back and pos.back ) or ( k.middle and pos.middle ) ) {
                    return v.allow( object );
                }
            }
        }

        return electricalAction.insert;
    }

    extend public bool remove( ElectricalPosition placement, electricalAction action) {
        for( k,v in electricalComponents ) {
            if ( k.position == placement.position and ( ( k.front and placement.front ) or (k.back and placement.back) or (k.middle and placement.middle) ) ) {
                electricalComponents.remove( k );
                this.electricalModelChange( v, k, electricalAction.remove );
                return true;
            }
        }
        return false;
    }

    extend public void apply( ElectricalModel object, ElectricalPosition placement, electricalAction action) {
        if ( findEM( placement ) ) {
            return;
        }
        object.owner = this.mainSnapper;
        electricalComponents.put( placement, object );
        this.electricalModelChange( object, placement, electricalAction.insert );
    }

    extend public void electricalModelChange( ElectricalModel obj, ElectricalPosition pos, electricalAction action ) {

    }

    extend public ElectricalPosition[] electricalPositions( ElectricalModel object ) {
        return null;
    }

    extend public ElectricalPosition[] getPlacedInfeedLocations() {
        ElectricalPosition[] positions();

        for( k,v in electricalComponents ) {
            if ( v in AweElectricalInfeedModel ) {
                positions << k;
            }
        }

        return positions;
    }

    /*** Electrical Regions ***/
    extend public box[] electricalRegions() {
        return null;
    }

    extend public point[] electricalDoors() {
        return null;
    }

    extend public line[] doNotConnect() {
        return null;
    }

    /*** Animations ***/
    extend public Animation customInsertAnimation(StartInsertAnimationEnv env) {     
        return null;
    }

    /*** Snapper space events ***/
    extend public void dropped() {
        
    }
}

public definition @visibility aweObject @name=id @parentClass=["extends" type]? '{'  @props=["props" formalArgList ';']? @members=[classMember]* '}' {
    if (!parentClass) {
        parentClass = new SType("AweObject");
    }

    SMembers gettersSetters(noSrcRef);
    SMembers onChange(noSrcRef);
    SStatements initProps();
    SStatements onPropChanged();

    if (props) {
        for (i in 0..(props.count - 1)) {
            SFormalArg arg = props[i];
            SType propType = arg.typeSyntax;
            SId propName = arg.id;
            str propNameStr = propName.name;
            SExpr propInitialValue = arg.default();
            SId onChangeMethodName(propName#"Changed");
            
            //3 signatures for change
            onChange << member {
                extend @visibility void @onChangeMethodName() { }
                extend @visibility void @onChangeMethodName(@propType newValue) { }
                extend @visibility void @onChangeMethodName(@propType oldValue, @propType newValue) { }
            };

            gettersSetters << member {
                extend @visibility @propType @propName() {
                    Object value = this.get(@propNameStr);
                    if(value) {
                        return value.@propType;
                    }
                    return @propInitialValue;
                }

                extend @visibility @propType @propName=(@propType newValue) {
                    @propType oldValue = this.@propName;

                    this.set(@propNameStr, newValue);
                    
                    return newValue;
                }
            };

            onPropChanged << statement {
                if (propName == @propNameStr) {
                    this.@onChangeMethodName();
                    this.@onChangeMethodName(newValue.?@propType);
                    this.@onChangeMethodName(oldValue.?@propType, newValue.?@propType);
                }
            };

            initProps << statement {
                this.@propName = @propName;
            };
        }
    }
    
    SId baseClassName(name.name#"_BaseClass");

    SMembers membersBundle(noSrcRef);
    for(m in members) {
        membersBundle << m;
    }

    if(props) {
        definition {
            @visibility class @baseClassName extends @parentClass {
                @gettersSetters;
                @onChange;

                @visibility void propChanged(str propName, Object oldValue, Object newValue) {
                    super(..);
                    
                    @onPropChanged;
                }
            }
        };

        definition {
            @visibility class @name extends @baseClassName {
                public constructor(@props) {
                    super();
                    @initProps;
                }

                public void init() { 
                    super();
                    @initProps;
                }

                @membersBundle;
            }
        };
    } else  {
        //pretty useless, huh?
        definition {
            @visibility class @name extends @parentClass {
                @membersBundle;
            }
        };
    }
    
}

public member @visibility aweObjectDomain @domains=formalArgList ';' {
    SMembers domainMembers(noSrcRef);
    SStatements buildQuickProperties();
    SStatements quickPropertiesChanged();

    SStatements buildAnimationProperties();
    SStatements animationPropertiesChanged();

    SStatements applyFrom();
    SStatements getDomain();
    SStatements getLabel();
    
    for (i in 0..(domains.count-1)) {
        SFormalArg arg = domains[i];
        SId propName = arg.id;
        str propNameStr = propName.name;
        SType propType = arg.typeSyntax;
        SId domainName(arg.id.name#"Domain");
        SExpr domainInitialValue = arg.default();
        SId labelName(arg.id.name#"Label");
        SId visibleName(arg.id.name#"Visible");
        SId controlTypeName(arg.id.name#"ControlType");

        domainMembers << member {
            @visibility SubSet @domainName = @domainInitialValue;
            @visibility str @labelName = @propNameStr.propNameToLabel();
            @visibility bool @visibleName = true;
            @visibility AwePropertyControlType @controlTypeName = AwePropertyControlType.default;
        };

        //we use distance subsets for double properties, so we need this great if statement there:
        if (propType.type == distance) {
            buildQuickProperties << statement {
                var @domainName = this.getDomain(@propNameStr);

                if (@domainName and @visibleName) {
                    Object customQuickProperty = aweDynamicCall @domainName.customQuickProperty(@propNameStr, @labelName, distance(@propName));

                    if (@domainName.any()) {
                        if (customQuickProperty) {
                            props.append(customQuickProperty.QuickProperty);
                        }
                        else {
                            props.append(this._uniqueQuickPropertyId # @propNameStr, @labelName, distance(@propName), @domainName, @controlTypeName);
                        }
                    }
                }
            };

            buildAnimationProperties << statement {
                var @domainName = this.getDomain(@propNameStr);

                if (@domainName and @visibleName) {
                    if (@domainName.any()) {
                        props.appendSmart(this._uniqueQuickPropertyId # @propNameStr, @labelName, distance(@propName), @domainName, @controlTypeName, lockable=false);
                    }
                }
            };

            applyFrom << statement {
                var @domainName = this.getDomain(@propNameStr);

                if (@domainName and @visibleName and @propNameStr !in ignore) {
                    if (Object value = source.get(@propNameStr)) {
                        // aweDynamicCall @domainName.customQuickProperty(@propNameStr, @labelName, distance(@propName));
                        
                        if (@domainName.contains(value)) {
                            this.@propName = value.@propType;
                        }
                    }
                }
            };
        }
        else {
            buildQuickProperties << statement {
                var @domainName = this.getDomain(@propNameStr);

                if (@domainName and @visibleName) {
                    Object customQuickProperty = aweDynamicCall @domainName.customQuickProperty(@propNameStr, @labelName, @propName);

                    if (@domainName.any()) {
                        if (customQuickProperty) {
                            props.append(customQuickProperty.QuickProperty);
                        }
                        else {
                            props.append(this._uniqueQuickPropertyId # @propNameStr, @labelName, @propName, @domainName, @controlTypeName);
                        }
                    }
                }
            };

            buildAnimationProperties << statement {
                var @domainName = this.getDomain(@propNameStr);

                if (@domainName and @visibleName) {
                    if (@domainName.any()) {
                        props.appendSmart(this._uniqueQuickPropertyId # @propNameStr, @labelName, @propName, @domainName, @controlTypeName, lockable=false);
                    }
                }
            };

            applyFrom << statement {
                var @domainName = this.getDomain(@propNameStr);

                if (@domainName and @visibleName and @propNameStr !in ignore) {
                    if (Object value = source.get(@propNameStr)) {
                        aweDynamicCall @domainName.customQuickProperty(@propNameStr, @labelName, @propName);
                        
                        if (@domainName.contains(value)) {
                            this.@propName = value.@propType;
                        }
                    }
                }
            };
        }
        
        quickPropertiesChanged << statement {
            if (key == this._uniqueQuickPropertyId # @propNameStr) {
                this.@propName = value.@propType;
                return true;
            }
        };

        animationPropertiesChanged << statement {
            if (key == this._uniqueQuickPropertyId # @propNameStr) {
                this.@propName = value.@propType;
            }
        };

        getDomain << statement {
            if (propName == @propNameStr) {
                return this.@domainName;
            }
        };

        getLabel << statement {
            if (propName == @propNameStr) {
                return @labelName ?? @propNameStr;
            }
        };
    }

    return member {
        @domainMembers;
                
        @visibility void buildQuickPropertiesFromSyntax(QuickProperties props) {
            super(..);
            @buildQuickProperties;           
        }

        @visibility bool quickPropertyChanged(QuickProperties props, str key, Object value, bool testChangeOnly) {
            if (key and !testChangeOnly) {
                @quickPropertiesChanged;
            }
            return super(..);
        }

        @visibility void buildAnimationPropertiesFromSyntax(AnimationProperties props) {
            super(..);
            @buildAnimationProperties;
        }

        @visibility void animationPropertyChanged(str key, Object value) {
            super(..);
            @animationPropertiesChanged;
        }

        @visibility void applyFrom(AweObject source, str{} ignore=null) {
            if (this.is(source.class)) {
                super(..);
                @applyFrom;
            }
        }

        @visibility SubSet getDomain(str propName) {
            if (SubSet domain = super(..)) {
                return domain;
            }
            
            @getDomain;

            return null;
        }

        @visibility str getLabel(str propName) {
            @getLabel;

            return super(..);
        }
    };
}

public int aweAPSort( AnimationProperty a, AnimationProperty b, Object order ) {
    return propertySort( a.key, b.key, order );
}

public int aweQPSort( QuickProperty a, QuickProperty b, Object order ) {
    return propertySort( a.key, b.key, order );
}

private int propertySort( str a, str b, Object order ) {
    if ( order as str[] ) {
        int aIndex = order.indexOf( a );
        int bIndex = order.indexOf( b );

        if ( aIndex > bIndex ) return bIndex == -1 ? -1 : 1; // if B wasn't in the list, push it to the end
        if ( bIndex > aIndex ) return aIndex == -1 ? 1 : -1; // if A wasn't in the list, push it to the end
    }
    return 0;
}

private point2D toElectricPoint( point self ) {
    return ( self.x, self.z );
}