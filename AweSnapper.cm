/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 LinkÃ¶ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome;

use cm.abstract.picklist;

use custom.awesome.connectors;
use custom.awesome.gallery;
use custom.awesome.picklist;

private alias SnapperArray = Snapper{};

private const str applyToKey = "awe-apply-from";
private const str helpLinkKey = "awe-help-link";

public class AweSnapper extends TaggableSnapper {
    public aweDynamicContract {
        aweDynamic void realign(SnapperArray visited=null);        
        aweDynamic void galleryChanged(AweGallery gallery);
        aweDynamic bool mustConnect();
    }

    private AweConnectorCache _connectorCache : copy=null, stream=null;

    extend public AweConnectorCache connectorCache() {
        if (!this._connectorCache) {
            this._connectorCache = new AweConnectorCache(this);
        }

        return this._connectorCache;
    }

    public constructor() {
        this.appendSelfToModels();

        this.lonelyRemove = this.mainModel().?lonelyRemove();
    }

    public AweObject activeConfigurator;

    extend public AweObject[] allModels() {
        return new AweObject[]();
    }

    extend public AweObject mainModel() {
        var allModels = allModels();
        return allModels.?count > 0 ? allModels.first() : null;        
    }

    extend public void appendSelfToModels() {
        for(m in allModels()) {
            m.appendSnapper(this);
        } 
    }

    extend public AweProduct[] allProducts() {
        return new AweProduct[]();
    }

    extend public AweGeometry[] allGeometries() {
        AweGeometry[] geometries();
        for(p in allProducts()) {
            geometries += p.geometries;
        }
        return geometries;
    }

    extend public void galleryChanged(AweGallery gallery) {
        bool shouldRefresh = false;
        var items = gallery.getItems();
        
        for (model in this.allModels()) {
            for (galleryItem in items) {
                if (model._galleryId == galleryItem.id) {
                    model.applyFrom(galleryItem.data);
                    
                    shouldRefresh = true;
                }
            }
        }

        if (shouldRefresh) {
            this.refresh(true, true);
        }
    }

    extend public bool isLegacySnapper() {
        return true;
    }

    extend public symbol{} allCategories() {
        symbol{} categories();

        categories +=? this.mainModel.?getCategories().?set;

        return categories;        
    }

    public void addSystemCategoriesTo(symbol{} categories) {
        super(categories);
        
        categories += this.allCategories();
    }

    /************** connections ***************/



    extend public bool mustConnect() {
        return true;
    }

    extend public void connectors(AweConnectorCache cc) {
    }

    public void connectors(ConnectorCollection collection) { 
        this.connectorCache.clearBuffer();
        this.connectors(this.connectorCache);

        for(c in this.connectorCache.buffer) {
            var mainModel = this.mainModel();
            if(mainModel)
                c.setModel(mainModel);
        }

        for (product in this.allProducts()) {
            product.createConnectors(this.connectorCache);
        }
        
       
        
        this.connectorCache.addToConnectors(collection);

        //connector sets in models
        for(m in allModels) {
            var lineToPropMap = m.connectLineToPropMap;

            for(c in m.getConnectors(this)) {
                if(c as AweConnectLine) {
                    var prop = lineToPropMap.get(c.getFullId());
                    if(prop) {
                        c.autoSizePropKey = prop;
                    }
                }
                collection << c;
            }
        }

        var stretchers = this.mainModel.getStretchers();

        if (stretchers and stretchers.any()) {
            for (s in stretchers) {
                s.addToConnectors(collection);
            }
        }

        super(collection);
    }

    public Animation leftDragAnimation(StartDragAnimationEnv env) {
        return new AweDragAnimation(env);
    }

    public bool buildQuickProperties(QuickProperties props) { 
        if (this.activeConfigurator) {
            return this.activeConfigurator.buildQuickProperties(..);
        }

        return super(..);
    }

    public bool quickPropertyChanged(QuickProperties props, str key, Object value, bool testChangeOnly) {
        if (this.activeConfigurator and !testChangeOnly) {
            bool changed = this.activeConfigurator.quickPropertyChanged(..);
            
            this.onPropertyChanged(key, value);
            this.refresh(true, true);
            
            return changed;
        }

        return super(..);
    }

    public str quickPropertyObjectToLabel(str key, Object value, SubSet domain=null) {
        for (m in this.allModels) {
            if (this.activeConfigurator == m) {
                if (str label = m.getQuickPropertyLabel(key, value)) {
                    return label;
                }
            }
        }
        
        return super(..);
    }

    extend public void onPropertyChanged(str key, Object value) {
    }

    extend public void onModelPropertyChanged(str key, Object oldValue, Object newValue) {
        this.groupChanged(new AweGroupAutomationPropChanged(this, key, oldValue, newValue));
        this.modelChanged(new AweGroupAutomationPropChanged(this, key, oldValue, newValue));
    }

    extend public void addExtraAnimationProperties(AnimationProperties props) { }

    extend public void extraAnimationPropertyChanged(str key, Object value) { }

    public Animation insertAnimation(StartInsertAnimationEnv env) {
        if (Animation customInsertAnimation = this.mainModel.?customInsertAnimation(env)) {
            return customInsertAnimation;
        }

        return new AweInsertAnimation(env);
    }

    /**
     * Loops through all connected snappers and try to realign them just like 
     * (re)alignAllSnapped would do except it will check individually if that
     * connector should realign (realign property of the connector)
     * It also triggers realign on all connected snappers that have the realign method 
     */
    extend public void realign(Snapper{} visited=null) {
        if (!visited) {
            visited = {Snapper: this};
        }
        else {
            if (this in visited) return;
            
            visited << this;
        }

        for (attach in this.connectors()) {
            if(attach) {
                var realign = aweDynamicCall attach.shouldRealign();
                var connections = attach.connections() ? attach.connections() : {Connector: attach.connection()};

                if (connections != null) {
                    if (realign.?bool) {
                        for (connection in connections) if(connection) {
                            alignConnectors(connection, attach, visited=visited, invalidate3D=false, removeFromBsp=false, tryRealign=true, forcePropagate=false);
                            
                            var snapper = connection.snapper;
                            if(snapper) {
                                aweDynamicCall snapper.realign(visited);
                            }
                        }
                    }

                    for (connection in connections) {
                        var realignConnected = aweDynamicCall connection.shouldRealign();

                        if (realignConnected.?bool) {
                            var other = attach;

                            alignConnectors(other, connection, visited=visited, invalidate3D=false, removeFromBsp=false, tryRealign=true, forcePropagate=false);
                        }
                    }
                }
            }
        }
    }

    /*********** refreshing ***********/
    extend public void refresh(bool updateConnectors=false, bool tryAlignAllSnapped=false) {
        if (updateConnectors)  this.updateConnectors();
        if (tryAlignAllSnapped) this.realign(null);

        invalidateQuickPropertiesFor(this);
        invalidate();
        this.space.invalidateSelection();

        if (updateConnectors) this.space.?updateSelectionConnectors();

        for(m in this.allModels()) {
            m.updateLimbDefaults();
        }
    }

    private bool _dropped = false : copy=null;
    private bool snapOnDrop = false : copy=null;

    public void dropped() {
        if (!this._dropped) {
            if (this.snapOnDrop) {
                this.snapOnDrop = false;
                this.snapAllAligned();
            }
            else {
                this.groupChanged(new AweGroupAutomationFirstDrop(this));
                this.modelChanged(new AweGroupAutomationFirstDrop(this));
            }
            
            for(m in this.allModels()) {
                m.dropped();
            }
            
            this._dropped = true;
        }
        
        super();
    }
    
    public Object copy(CopyEnv env, bool shallow=false) {
        var copied = super(..);
        
        if (copied as AweSnapper) {
            copied.snapOnDrop = true;
        }

        return copied;
    }

    public void connected(Connector c0, Connector c1, bool snapped, bool attached) {
        super(..);

        if (!c0.isPassive()) {
            this.groupChanged(new AweGroupAutomationConnected(this, c0, c1));
        }
        this.modelChanged(new AweGroupAutomationConnected(this, c0, c1));
    }

    public void disconnected(Connector c0, Connector c1, bool wasSnapped, bool wasAttached) {
        super(..);

        this.groupChanged(new AweGroupAutomationDisconnected(this, c0, c1));
        this.modelChanged(new AweGroupAutomationDisconnected(this, c0, c1));
    }

    public void invalidated(dirty3D flag3D) {
        this.appendSelfToModels();
        invalidateLights();
        super(..);
    }

    public void invalidated(dirty2D flag2D) {
        this.appendSelfToModels();
        super(..);
    }

    extend public str helpLink() {
        return null;
    }
    
    /********** model changed ***********/
    extend public void modelChanged(AweGroupAutomationTrigger trigger) {
        for (model in this.allModels()) {
            for (automation in model.getAutomations()) {
                if (!automation.shouldRun(trigger)) continue;
        
                automation.run(trigger, this.mainModel());
            }
        }
    }

    /********** group changed ***********/
    public str spawnerAutomationId;

    public bool automatic() {
        return this.spawnerAutomationId != null;
    }

    extend public bool shouldFireGroupChanged() {
        return !disableGroupChangeTrigger and !this.automatic() and this.isAlive();
    }

    extend public void groupChanged(AweGroupAutomationTrigger trigger) {
        if (!this.shouldFireGroupChanged()) return;

        var group = this.groupModels();
        str->AweGroupAutomation automations();

        for (model in group) {
            var modelGroupAutomations = model.getGroupAutomations();
            
            for(auto in modelGroupAutomations) {
                if(!automations.get(auto.id)) {
                    automations.put(auto.id, auto);
                }
            }
        }
    
        disableGroupChangeTrigger = true;
    
        for (id, automation in automations) {
            if (!automation.shouldRun(trigger)) continue;

            var map = this.findAutomationSpawnSnappers(id, this.groupSnappers());            
            var cloner = new AweAutomationPropertyCloner(map);

            var newSnappers = automation.run(trigger, group, this.mainModel(), cloner);
            
            // if (newSnappers and newSnappers.any()) {
            //     for (oldOne in map) {
            //         if (oldOne.snapper !in newSnappers) {
            //             this.space.remove(oldOne.snapper);
            //         }
            //     }
    
            //     for (newOne in newSnappers) {
            //         this.space.put(newOne);
    
            //         newOne.spawnerAutomationId = id;
            //         newOne.lonelyRemove = true;
            //     }
            // }
        }
        
        disableGroupChangeTrigger = false;
    }

    extend private AweAutomationBoxToModelMapItem{} findAutomationSpawnSnappers(str id, Snapper{} snappers) {
        AweAutomationBoxToModelMapItem{} found();
        
        for (AweSnapper s in snappers) {
            if (s.spawnerAutomationId == id) {
                found << new AweAutomationBoxToModelMapItem(s);
            }
        }

        return found;
    }

    extend private Snapper{} groupSnappers(bool onlyDirectly=false) {
        var snappers = onlyDirectly ? this.neighbors() : this.allConnected();
    
        if (onlyDirectly) {
            Snapper{} nextLevelNeighbors();

            for (snapper in snappers) {
                nextLevelNeighbors += snapper.neighbors();
            }

            snappers += nextLevelNeighbors;
        }

        snappers << this;
        
        return snappers;
    }

    extend public AweObject{} groupModels(bool onlyDirectly=false) {
        AweObject{} allModels();
        
        for (AweSnapper s in this.groupSnappers(onlyDirectly)) {
            allModels += s.allModels();
        }

        return allModels;
    }

    /***********************************************************************
     * Parts
     ***********************************************************************/
    
    public void beforeGetParts(PartsEnv env) {
        super(env);

        if (this.specialParts and this.picklistProxy) {
            if (picklistInterface) {
                picklistInterface.beforeGetParts(this.picklistProxy, env);
            }
        }
    }

    public void getParts(PartsEnv env, Snapper{} visited) {
        if (this in visited) return;
        
        visited << this;

        for (part in this.getParts()) {
            env << part;
        }
    }

    public void afterGetParts(PartsEnv env) {
        // We were having problems with tags that kept in the World even if we changed the model and modified the Snapper
        // to not add it. Cleaning all the tags from the Snapper and letting it re-create based on what is placed in the World
        // seems to fix that.
        resetItemTags();
        super(env);

        if (this.specialParts and this.picklistProxy) {
            if (picklistInterface) {
                picklistInterface.afterGetParts(this.picklistProxy, env);
            }
        }
    }

    extend public AwePart[] getParts() {
        AwePart[] result();

        if (this.specialParts and this.picklistProxy) {
            var items = this.picklistProxy.getItems(this.picklistProxy.picklistKey);

            for (AwePicklistItem item in items) {
                result << item.getPart(this);
            }
        }
        else {
            var products = this.allProducts();
            
            if (products.count == 0) return result;

            for (product in products) {
                var parts = product.getParts();

                for (part in parts) {
                    part.data.setOwner(this);
                    
                    result << part;
                }
            }
        }

        return result;
    }

    public bool denyParts() {
        return this.allProducts.count == 0;
    }

    /***********************************************************************
     * Parts Query Dialog
     ***********************************************************************/

    public TreeViewItem[] popupMenuItems(View view, DropDownMenu ddm) {
        var items = super(..);
        
        if (selectMode == userSelect.single) {
            if (AweEnum options = this.mainModel.applyFromOptions()) {
                for (entry in options.entries) {
                    items << new ImageTreeViewItem(format("@applyToKey;_@entry.name;"), format("Apply @entry.value; to Selection"), icon("copy"));
                }
            }
            else {
                items << new ImageTreeViewItem(applyToKey, "Apply to Selection", icon("copy"));
            }
        }

        items << new DelimiterTreeViewItem();
        items << this.getAweQueryDialogItem(view, ddm);

        if (this.helpLink()) {
            items << new ImageTreeViewItem(helpLinkKey, "Help", icon("helpbubble"));
        }
        
        return items;
    }

    public bool popupMenuItemClicked(View view, MenuCallbackEnv env) {
        if (this.aweQueryDialogItemClicked(view, env)) {
            return true;
        }
        else if (env.key == helpLinkKey) {
            cm.os.openLocation(this.helpLink());
        }
        else if (env.key.beginsWith(applyToKey)) {
            this.applyToSelection(env.key);
        }

        return super(view, env);
    }

    public bool specialParts;
    private AwePicklistProxy _picklistProxy : copy=null, stream=null;

    extend public AwePicklistProxy picklistProxy() {
        if (!this._picklistProxy) {
            this._picklistProxy = this.getQueryPicklistProxy();
        }
        return this._picklistProxy;
    }


    extend public AwePicklistProxy getQueryPicklistProxy() {
        return null;
    }

    extend private void applyToSelection(str key) {
        str optionName = null;
        
        if (key.contains("_")) {
            optionName = key.split('_').v1;
        }

        for (snapper in this.space.selection) if (snapper != this) {
            if (snapper as AweSnapper) {
                if (optionName) {
                    snapper.mainModel.applyFrom(this.mainModel, optionName);
                }
                else {
                    snapper.mainModel.applyFrom(this.mainModel);
                }

                snapper.refresh(true, true);
            }
        }
    }

    /************ validation ***************/
    public void appendInvalidation(InvalidList invalidList) {
        AweValidationIssues issues({Snapper: this});

        validate(issues);
        for(model in allModels()) {
            model.validate(issues);
        }
        for(product in allProducts()) {
            product.validate(issues);
            product.validateGeometries(issues);
        }

        this.validateParts(this.getParts(), issues);

        issues.feed(invalidList);
    }

    extend public void validateParts(AwePart[] parts, AweValidationIssues issues) {
    }

    extend public void validate(AweValidationIssues issues) {
    }

    /************ lights **************/

    /* !!!!! important !!!!****/
    //remeber to return false on deny lights on your snapper, like this:
    // public bool denyLights() { return false; }

    public Light3D[] getLights(FetchLightEnv env) {
        Light3D[] light3Ds();
        for(model in lightModels()) {
            light3Ds << AweLight3D(this, model);
        }
        return light3Ds;
    }

    public bool acceptItemTags() {
        return true;
    }
        
    public ItemTagInfo createItemTagInfo(Part part, str key, str infoKey) {
        return this.createAweItemTagInfo(part, key, infoKey);
    }

    public point itemTagPos(ItemTag tag) {
        return (0,0,0);
    }

    private AweLightModel[] _lightModels;
    extend public AweLightModel[] lightModels() {
        if(!_lightModels) {
            _lightModels = new AweLightModel[]();
        }
        for(g in allGeometries) {
            g.lights.clear();
            g.buildLights();
            for(model in g.lights) {
                _lightModels << model;
            }
        }
        return _lightModels;
    }

    extend private bool hasLights() {
        return lightModels().any();
    }

    extend private void invalidateLights() {
        if(hasLights()) {
            _lightModels = null;
            if (space) space.invalidateLight3D(this);
        }
    }

    public void removed(RemoveSnappersEnv env) {
        invalidateLights();
        super(env);
    }

    public void suspended() {
        invalidateLights();
        super();
    }

    public void unsuspended() {
        super();
        invalidateLights();
    }

    public bool dbg_connectLinesIn3D() {
        if (developMode and this.mainModel) {
            for (set in this.mainModel.connectorSets()) {
                if (set.debug) return true;
            }
        }
        
        return false;
    }

    /***********************************************************************
     * Stretch
     ***********************************************************************/
    
    public void updateConnectors() {
        this.space.?updateSelectionConnectors();
        super(..);
    }

    public bool stretchable(Connector s) { return s in AweStretchableConnector; }
    
    public bool stretch(Connector s, point p, AnimationMouseInfo mi) {
        if (s as AweStretcherConnector) {
            if (animation as AweStretcherAnimation) {
                if (animation.animationProperties.locked(s.stretcher.propKey)) {
                    return super(..);
                }
            }
           
            return s.stretcher.update(s, p);
        }

        return super(..);
    }

    public void beginStretch(Connector s) {
        super(..);
        this.snapAllAligned();
    }

    public void endStretch(Connector s) {
        super(..);

        if (s as AweStretchableConnector) {
            if (s as AweStretcherConnector) {
                s.stretcher.model.endStretch(s.stretcher.propKey, s.stretcher.model.get(s.stretcher.propKey).?double);
            }

            this.snapAllAligned();
            this.invalidate3D();
            this.invalidate2D();
        }
    }

    public point visiblePosition(Connector c, point p, Connector t) {
        if (c as AweStretcherConnector) {
            return p + c.visiblePosOffset;
        }

        if (AweObject model = this.mainModel()) {
            for (set in model.connectorSets()) {
                if (Point pos = set.visiblePosition(c, p)) {
                    return pos.v;
                }
            }
        }
        
        return super(..);
    }

    extend public AweStretcher getActiveStretcher() {
        if (isAbortingAnimation or isEndingAnimation) return null;

        if (animation as LineStretchAnimation) {
            if (?AweStretcherConnector snap = animation.snap) {
                return snap.stretcher;
            }
        }
    
        return null;
    }

    public Connector{} snaps() {
        FilteredConnectorSet c(AweNoGhostConnnectorFilter());
        connectors(c);
        return c.set;
    }

    //return a line here to display connection angle during try snap
    extend public Line2D referenceLine() {
        return this.mainModel().?referenceLine();
    }

    extend public Line2D referenceLineInSpace() {
        var l = this.referenceLine();
        if(!l) return null;
        return this.toSpace(l.v);
    }

    public double connectLineAlignConnector(ConnectLine s, Connector c, double t) {
        if (AweObject model = this.mainModel()) {
            for (set in model.connectorSets()) {
                if (Double align = set.connectLineAlignConnector(..)) {
                    return align.v;
                }
            }   
        }
        
       return super(..);
    }
}

private bool disableGroupChangeTrigger = false;