/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 LinkÃ¶ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome.product;

use custom.awesome.sif;

private const str notFoundInSifErrorMessage = " * Not found in SIF";
private const str allsteelCompanyCode = "ALS";

public class AwePart extends OfficePart {
    public str sku;
    public str catalog;
    public str company;
    public str category;
    public bool isValid;
    public bool isSpecial;
    private AwePartOption[] options : public readable;
    public AwePartHeader header();
    public AweTag tag;

    public str->double specialUpcharges();

    public constructor(str catalog, str sku, double quantity=1, AweTag tag=null) {
        super();

        this.catalog = catalog;
        this.sku = sku;

        this.data.setArticleCode(this.basemodel);
        this.data.setQuantity(quantity);
        this.tag = tag;

        if (this.tag) {
            this.tag.infoKey = this.flattenableKey();
        }
    }

    public constructor(Snapper snapper, str catalog, str sku, double quantity=1, AweTag tag=null) {
        this.catalog = catalog;
        this.sku = sku;
        this.tag = tag;
        
        super(snapper, this.basemodel, this.sku, 0, quantity=quantity);
    }

    extend private str basemodel() {
        var skuParts = this.sku.breakdownSku();

        if (skuParts and skuParts.any()) {
            return skuParts.first();
        }

        return this.sku;
    }

    public str getCompanyCode() {
        return allsteelCompanyCode;
    }

    public str catalog() {
        return this.catalog;
    }

    public str company() {
        return this.company;
    }

    public str category() {
        return this.category;
    }

    public ItemTag createItemTag() {
        ItemTagInfo info = itemTagInfo();
        
        point position = this.tag ? this.tag.getPos : (0, 0, 0);
        angle rotation = this.tag ? this.tag.rotation : 0deg;

        return ItemTag(owner, info, drawPos=position, rot=rotation, key=itemTagKey());
    }
    
    public bool acceptItemTags() {
        if (this.tag) return owner and owner.acceptItemTags();

        return false;
    }    
    
    public PartInfoTree[] infoTrees() {
        PartInfoTree[] tree();

        if (!this.options) return tree;
        
        for (option in this.options) {
            tree << option;
        }

        return tree;
    }

    extend public void appendOption(AwePartOption option) {
        if (!option) return;
        if (!this.options) init this.options();
        
        option.owner = this;
        
        this.options << option;
    }

    extend public void appendOption(str code, str name=null, str description=null, double price=0, bool valid=false) {
        this.appendOption(new AwePartOption(this, code, name, description, price, valid));
    }

    extend public void appendOptions(AwePartOption[] options) {
        if (!options or options.empty()) return;
        
        for (option in options) {
            this.appendOption(option);
        }
    }

    extend public double totalUpcharge() {
        double total = 0;

        for (option in this.options) {
            total += option.price;
        }

        return total;
    }

    extend public bool isValid() {
        return this.isValid and !this.sku.contains("~");
    }

    public str itemTagKey() {
        if (!empty(this.tag.?key)) {
            return this.tag.key;
        }
        else {
            return super();
        }
    }

    public str flattenableKey() {
        return this.sku # this.header.tg;
    }

    public str completeSpecified() { return this.isValid() ? "Yes" : "No"; }

    public str[] generatePmSifRows(Space space) {
	    str[] res();

        // PN= Part Number
        res << spnn("PN=", this.data.articleCode);        
        // PD= Part Description (Can be adjusted from the Calculation Window)
        res << spnn("PD=", this.description(space));      
        // MC= Master Catalog
        res << spnn("MC=", this.catalog ?? "");
        // QT= Quantity (Can be adjusted from the Calculation Window)
        res << spnn("QT=", this.visibleQuantity(space));
        // S-= Discount
        res << spnn("S-=", this.discount(space) * 100);
        // SP= Sell Price
        res << spnn("SP=", this.sellPrice(true, space).formatted(precision=2));
        // TG= Ind. Tag
        res << spnn("TG=", this.tag ? this.tag.text : "");

        //Catalog specific header rows
        for (row in this.header.getCatalogHeaderRows()) {
            res << row;
        }

        this.generateOptionRows(res, this.options);

        return res;
    }

    extend private void generateOptionRows(str[] res, AwePartOption[] options) {
        for (option in this.options) {
            // Remove error message from description when exporting to SIF
            str desc = option.description.replaceAll(notFoundInSifErrorMessage, "");

            // ON= Option Code
            res << spnn("ON=", option.code);
            // OD= Option Description
            res << spnn("OD=", desc);
            // OG= Option Group
            res << spnn("OG=", option.name);
            // O1= Option Upcharge
            if (option.price > 0) {
                res << spnn("O1=", option.price);
            }
        }
    }
}

public class AweSpecialPart extends AwePart {
    public str flattenableKey() {
        return this.sku # this.header.tg # this.tag.?key # this.tag.?text;
    }
}