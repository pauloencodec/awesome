/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 Link√∂ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome.product;
use cm.geometry.advanced;

public class AweProduct extends AweGeometry {
    private Primitive3D medium3D;
    private Primitive3D super3D;
    private AweGraph graph;

    public AweGeometry[] geometries;

    extend public AweProduct operator<<(AweGeometry geometry) {
        if (geometry and geometry !in this.geometries) {
            this.geometries << geometry;
        }
        
        if (geometry as AweProduct) {
            for (geo in geometry.geometries) {
                if (geo !in this.geometries) {
                    this.geometries << geo;
                }
            }
        }
        
        return this;
    }

    extend public AweProduct operator<<(AweGeometry[] geometries) {
        for (g in geometries) {
            this << g;
        }

        return this;
    }

    public constructor(AweObject model) {
        this.updateModel(model);
    }   

    extend public Line2D getLoi(str key) {
        return this.loi.get(key);
    }

    extend public Point2D getPoi(str key) {
        return this.poi.get(key);
    }

    extend public Graph getGoi(str key) {
        return this.goi.get(key);
    }

    extend public void updateModel(AweObject model) {
        this._model = model;
        
        this.modelChanged();
    }

    extend public void modelChanged() {
        this.refresh();
    }

    extend public void refresh() {
        this.medium3D = null;
        this.super3D = null;
        this.graph = null;
        this.geometries = new AweGeometry[]();
        this.parts.clear();
        this.lights.clear();
        //adding self to list of geometries
        this << this;
        
        this.build();
        this.createParts();
    }

    extend public void build() {
    }

    extend public void buildSuper3D() {
        Primitive3D[] prims();

        for (g in this.geometries) {
            prims <<? g.super3D();
        }

        this.super3D = safeSet3D(prims);
    }

    extend public void buildMedium3D() {
        Primitive3D[] prims();

        for (g in this.geometries) {
            prims <<? g.medium3D();
        }

        this.medium3D = safeSet3D(prims);
    }

    extend public void buildGraph() {
        this.graph = new AweGraph();

        for (geometry in this.geometries) {
            if (Graph g = geometry.graph()) {
                this.appendInterests(geometry);
                
                this.graph << g;
            }
        }
    }

    extend public Primitive3D get3D(FetchEnv3D env) {
        //for rendering
        if (env.detail == detailLevel3D.super) return this.getSuper3D();
        var prim = this.getMedium3D();
        var snapper = this._model.?mainSnapper;
        if(snapper) {
            var viewMode = snapper.?space.?viewMode();
            if(viewMode and viewMode.process3D) {
                return viewMode.process3D(snapper, prim.copy());
            }
        }
        return prim;
    }

    extend public Primitive3D getSuper3D() {
        if (!this.super3D) this.buildSuper3D();

        return this.super3D;
    }

    extend public Primitive3D getMedium3D() {
        if (!this.medium3D) this.buildMedium3D();

        return this.medium3D;
    }

    extend public Graph get2D() {
        if (!this.graph) this.buildGraph();
        
        return this.graph;
    }

    public box localBound() {
        box result();

        if (this.geometries and this.geometries.any()) {
            for (g in this.geometries) if (g != this) {
                result += g.localBound;
            }
        }

        return result;
    }

    extend public box bound() {
        var b = this.localBound();
        if(Snapper s = this._model.?mainSnapper()) {
            return b.rotated(s.rot).moved(s.pos);
        }
        return b;
    }

    public AwePart[] getParts() {
        AwePart[] result = super();

        if (this.geometries and this.geometries.any()) {
            for (g in this.geometries) {
                if ( g != this ) {
                    result += g.getParts();
                }
            }
        }

        return result;
    }

    extend public void createConnectors(AweConnectorCache cache) {
        cache.currentProduct = this;

        this.connectors(cache);

        cache.currentProduct = null;
    }

    extend public void connectors(AweConnectorCache cache) {
    }

    extend private void appendInterests(AweGeometry geometry) {
        for (k, v in geometry.poi) {
            this.poi.put(k, v);
        }

        for (k, v in geometry.loi) {
            this.loi.put(k, v);
        }

        for (k, v in geometry.goi) {
            this.goi.put(k, v);
        }
    }

    extend public void validateGeometries(AweValidationIssues issues) {
        if (this.geometries and this.geometries.any()) {
            for (g in this.geometries) {
                g.validate(issues);
            }
        }
    }

    public void validate(AweValidationIssues issues) {

    }
}