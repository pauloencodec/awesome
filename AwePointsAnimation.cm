/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 Link√∂ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome;

public class AwePointsAnimation extends AweAnimation {

    private AweAnimationHint hint(); 
    public constructor(int count=1) {
        super(new StartAnimationEnv(count));
    }   

    public double z = 0;
    public point[] points();
    public Point currentPoint = point();

    extend public void message(str text) { 
        this.hint.show(text);
    }

    extend public void hideMessage() { 
        this.hint.hide();
    }

    //return null if you don't want it.
    extend public Point adjustPoint(int pointIndex, point mousePoint, AnimationMouseInfo mi) {
        return mousePoint;
    }

    //a point has been clicked. return null if you don't want it. return a different point if you'd like to save something else. why would you? i don't know. thought i'd give you the chance.
    extend public point savePoint(int pointIndex, point mousePoint) {
        return mousePoint;
    }

    public void move(AnimationMouseInfo mi) {
        this.updateCurrentPoint(mi);
    }

    public void click(AnimationMouseInfo mi) {
	    super(..);

        if (this.currentPoint) {
            if (Point pointToSave = this.savePoint(points.count(), this.currentPoint.v)) {
                this.points << pointToSave.v;
            }
        }
    }

    extend public plane referencePlane() {
        return plane(vector(0, 0, 1), this.z);
    }

    extend public void updateCurrentPoint(AnimationMouseInfo mi) {
        line ml = mi.mouseLine;
        point mp = ml.intersect(this.referencePlane()).ip;
        Point newPoint = adjustPoint(this.points.count(), mp, mi);
        
        if (!newPoint) {
            this.currentPoint = null;
            this.refresh();
        }
        else if (newPoint != currentPoint) {
            this.currentPoint = newPoint;
            this.refresh();
        }
    }

    extend public void refresh() {
        if (space) {
            if ( viewMode ) space.invalidate3D( viewMode );
            space.invalidate2D(this);
            space.invalidate3D(this);
            space.beginAnimateDrawSequence(this);
            space.initAnimateDraw(this);
            space.animateDraw(this);
        }
    }

    public bool deny3D() {
	    return false;
    }

    /**
     * Get 2D.
     */
    public void drawGraphs(LayerBuffer lb) {
        this.get2D().?draw(lb);
    }

    /**
     * Get 2D.
     */
    public Graph get2D() {
        AweGraph graph();

        if (this.currentPoint)
            graph << new GDot(this.currentPoint.v);
        
        for (p in this.points) {
            graph << new GDot(p);
        }

        return graph;
    }

    public Primitive3D get3D(FetchEnv3D env) {
        if (this.currentPoint) {
            Sphere3D current(this.currentPoint.v, 3inch);
            
            current.setMaterial(glassMaterial3D);
            
            return new Awe3D(current);
        }

        return null;
    }

    private Space _space;

    public Space space() {
        if (!this._space) this._space = activeSpace();

        return this._space;
    }

    public void increaseState() {
        if (this.currentPoint) {
            super(..);
        }
    }

    public void enterView(AnimationMouseInfo mouseInfo) {
        super(mouseInfo);
 
        if (this.space) {
            this.space.clearSelection();
        }
    }

    public void begin() {
        super();

        if (space) {
            space.beginAnimateDrawSequence(this);
            space.show(this);
            
            // ViewMode vm = AweElectricalViewMode();
            // this.space._viewMode = vm;
            // this.space.viewModeChanged();
        }
    }

    public PropObj end() {
        if (space) {
            this.hint.destroy();
            space.endAnimateDrawSequence(this);
            space.hide(this);
        }

        return super(..);
    }

    public void abort() {
        if (space) {
            this.hint.destroy();
            space.abortAnimateDraw(this);
            space.hide(this);
        }


        this.setViewMode(null);

        super(..);
    }
}
{
    animate(AwePointsAnimation(5));
}